https://leetcode.com/problems/zigzag-iterator/
starting from row 0, index 0
add all the list to a list
the total cur index will increase one for every element:
so the current row is curIndex%RowList.size()
the current index of the row is curIndex/RowList.size()
we memorize the longest size of all the list.
so hasNext() will try to find the next non-empty list until we reach curIndex/RowList.size() == size+1 that means we already
visited the last element of all list.

public class ZigzagIterator {
    int size;
    List<List<Integer>> mem;
    //List<Integer> index;
    int curIndex;

    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
        mem = new ArrayList<>();
        size = 0;
        size = Math.max(v2.size(),v1.size());
        mem.add(v1);
        mem.add(v2);
        //curIndex = new ArrayList<>(new int[]{0,0});
        curIndex = 0;
    }

    public int next() {
        for (int i=0; i<mem.size(); i++) {
            int index = curIndex/mem.size();
            int row = curIndex%mem.size();
            curIndex++;
            if (index > mem.get(row).size()-1) {
                continue;
            }
            
            return mem.get(row).get(index);
        }
        return 0;
    }

    public boolean hasNext() {
        while (curIndex/mem.size() < (size+1) && curIndex/mem.size() >= mem.get(curIndex%mem.size()).size()) curIndex++;
        return curIndex/mem.size() != size+1;
    }
}
