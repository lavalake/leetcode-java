
BFS, when traversal, use map to record the col and value list.
for example, root is col 0
every left ->col-1
every right -> col+1
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        Queue<Pair> queue = new LinkedList<>();
        Map<Integer, List<Integer>> map = new HashMap<>();
        List<List<Integer>> ret = new ArrayList<>();
        if (root != null) {
            queue.offer(new Pair(0, root));
        }
        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        while (!queue.isEmpty()) {
            Pair p = queue.poll();
            if (!map.containsKey(p.index)) {
                map.put(p.index, new ArrayList<Integer>());
            }
            map.get(p.index).add(p.node.val);
            min = Math.min(min, p.index);
            max = Math.max(max, p.index);
            if (p.node.left != null) {
                queue.offer(new Pair(p.index-1, p.node.left));
            }
            if (p.node.right != null) {
                queue.offer(new Pair(p.index+1, p.node.right));
            }
        }
        for (int i=min; i<=max; i++) {
            ret.add(map.get(i));
        }
        return ret;
    }
    private static class Pair {
        int index;
        TreeNode node;
        public Pair(int index, TreeNode node) {
            this.index = index;
            this.node = node;
        }
    }
}
