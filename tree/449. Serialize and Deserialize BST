
449. Serialize and Deserialize BST
①  与Serialize and Deserialize Binary Tree相似，但是一般的树变成了BST，而且要求是as compact as possible。还是可以用preorder，
还是需要分隔符，但是null就不需要保存了。deserialize部分要变得复杂，left的值总是小于root的值，right的值总是大于root的值，
根据这个每次recursion的时候把左边的值都放到另一个queue里面，剩下的就是右边的值。
preorder, recursive solution
public class Codec {
    public static final String SPLITER = ",";
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serializeHelper(root, sb);
        if (sb.length() !=0) sb.deleteCharAt(sb.length()-1);
        return sb.toString();
    }
    private void serializeHelper(TreeNode root, StringBuilder sb) {
        if (root == null) return;
        sb.append(String.valueOf(root.val)+SPLITER);
        serializeHelper(root.left, sb);
        serializeHelper(root.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.length() == 0) return null;
        Queue<String> full = new LinkedList<>();
        full.addAll(Arrays.asList(data.split(SPLITER)));
        return deserializeHelper(full);
    }
    private TreeNode deserializeHelper(Queue<String> full) {
        if (full.size() == 0) return null;
        
        TreeNode root = new TreeNode(Integer.valueOf(full.poll()));
        Queue<String> left = new LinkedList<>();
        while (!full.isEmpty() && root.val > Integer.valueOf(full.peek())) left.offer(full.poll());
        root.left = deserializeHelper(left);
        root.right = deserializeHelper(full);
        return root;
    }
}
