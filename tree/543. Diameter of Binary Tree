https://leetcode.com/problems/diameter-of-binary-tree/description/
/*Pay attention that we define "The diameter of a binary tree is the length of the longest path between any 
two nodes in a tree" in the problem, The length of path between two nodes is represented by the number of edges between them
that is why we update with "max = Math.max(max, left + right);" 
instead of "max = Math.max(max, left + right + 1);".
pay attention this prolem need number of edge, not depth
difference between this one with 124	Binary Tree Maximum Path Sum
this one, must start from a leaf and end at a leaf
124 does not need to start or stop at a leaf
*/
class Solution {
    int max = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        depth(root);
        return max;
    }
    private int depth(TreeNode root) {
        if (root == null) return 0;
        int left = depth(root.left);
        int right = depth(root.right);
        max = Math.max(max, left + right);
        return Math.max(left, right)+1;
    }
}
