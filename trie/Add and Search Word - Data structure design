https://leetcode.com/problems/add-and-search-word-data-structure-design/description/
This one use Tire and recercive
if contains '.', then we need check every children for this level. So for loop and if any return true. then return true.
class WordDictionary {
    Node root;
    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new Node();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        Node temp = root;
        for (char c : word.toCharArray()) {
            if (temp.child[c-'a'] == null) {
                temp.child[c-'a'] = new Node();
            }
            temp = temp.child[c-'a'];
        }
        temp.isLeaf = true;
        
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return searchTrie(word, 0, root);
    }
    public boolean searchTrie(String word, int start, Node node) {
        Node temp = node;
        char[] arr = word.toCharArray();
        for (int i=start; i<arr.length; i++) {
            if (arr[i] == '.') {
                for (Node n : temp.child) {
                    if (n != null && searchTrie(word, i+1, n)) return true;
                    
                }
                return false;
            } else {
                if (temp.child[arr[i]-'a'] == null) {
                    return false;
                } else {
                    temp = temp.child[arr[i]-'a'];
                }
            }
        }
        return temp.isLeaf;
    }
    public static class Node {
        public Node[] child;
        public boolean isLeaf;
        public Node() {
            child = new Node[26];
            isLeaf = false;
        }
    }
    /*
    public static class Trie {
        Node root;
        public Trie() {
            root = new Node();
        }
        public addWord(String word) {
            
        }
    }*/
}
