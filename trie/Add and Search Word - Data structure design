https://leetcode.com/problems/add-and-search-word-data-structure-design/description/
This one use Tire and backtracking
if contains '.', then we need check every children for this level. So for loop and if any return true. then return true.
class WordDictionary {
    TrieNode root;
    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode temp = root;
        for (char c : word.toCharArray()) {
            if (temp.children[c-'a'] == null) {
                temp.children[c-'a'] = new TrieNode();
            }
            temp = temp.children[c-'a'];
        }
        temp.isLeaf = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return helper(root, word);
    }
    private boolean helper(TrieNode root, String word) {
        TrieNode temp = root;
        for (int i=0; i<word.length(); i++) {
            char c = word.charAt(i);
            if (c != '.' && temp.children[c-'a'] == null) return false;
            /*****************/
            if (c == '.') {
                for (TrieNode n : temp.children) {
                    if (n != null && helper(n, word.substring(i+1))) return true;
                }
                return false;
            }
            /************************************/
            temp = temp.children[c-'a'];
        }
        return temp.isLeaf;
    }
    public static class TrieNode {
        TrieNode[] children;
        boolean isLeaf;
        public TrieNode() {
            children = new TrieNode[26];
            isLeaf = false;
        }
    }
}
