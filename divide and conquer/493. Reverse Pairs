https://leetcode.com/problems/reverse-pairs/discuss/97268/General-principles-behind-problems-similar-to-%22Reverse-Pairs%22
class Solution {
    public int reversePairs(int[] nums) {
        long max = Integer.MIN_VALUE;
        int cnt = 0;
        return reversePairSub(nums, 0, nums.length-1);
    }
    private int reversePairSub(int[] nums, int l, int r) {
        if (l >= r) return 0;
        int cntl=0, cntr =0, cnt=0;
        int mid = l+(r-l)/2;
        cntl = reversePairSub(nums, l, mid);
        cntr = reversePairSub(nums, mid+1, r);
        long numl = 0, numr = 0;
        int l1 = l, r1 = mid+1;
        while (l1 <= mid && r1 <= r) {
            if (l1 <= mid)
                numl = nums[l1];
            if (r1 <= r)
                numr = nums[r1];
            if (numl > 2*numr) {
                cnt += mid - l1 + 1;
                r1++;
            } else {
                l1++;
            }
        }
        l1 = l; r1 = mid+1;
        int n = 0;
        int[] merge = new int[r - l + 1];
        while (l1 <= mid || r1 <= r) {
            long nl = Long.MAX_VALUE;
            long nr = Long.MAX_VALUE;
            if (l1 <= mid) nl = nums[l1];
            if (r1 <= r) nr = nums[r1];
            if (nl < nr) {
                merge[n++] = (int)nl;
                l1++;
            } else {
                merge[n++] = (int)nr;
                r1++;
            }
        }
        System.arraycopy(merge, 0, nums, l, merge.length);
        return cnt+cntl+cntr;
    }
}
