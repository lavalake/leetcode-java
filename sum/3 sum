15. 3Sum
still need to use two pointer. but we use the first one as a target.
target = -nums[i]
then check i+1 to length-1, whether there is sum to target.
So if nums[i] > 0, that means all nums are larger than 0. so no need to continue;

public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> ret = new HashSet<>();
        Arrays.sort(nums);
        int target = 0, left = 0, right = 0;
        for (int i=0; i<nums.length; i++) {
            if (nums[i] > 0) break;
            target = -nums[i];
            left = i+1;
            right = nums.length-1;
            while (left < right) {
                if (nums[left] + nums[right] == target) {
                    List<Integer> newList = new ArrayList<>();
                    newList.add(nums[i]);
                    newList.add(nums[left]);
                    newList.add(nums[right]);
                    ret.add(newList);
                    left++;
                    right--;
                } else if (nums[left] + nums[right] > target) {
                    right--;
                } else {
                    left++;
                }
            }
        }
        return new ArrayList(ret);
    }
}

16. 3Sum Closest
这道题让我们求最接近给定值的三数之和，是在之前那道 3Sum 三数之和的基础上又增加了些许难度，那么这道题让我们返回这个最接近于给定值
的值，即我们要保证当前三数和跟给定值之间的差的绝对值最小，所以我们需要定义一个变量diff用来记录差的绝对值，然后我们还是要先将数组排
个序，然后开始遍历数组，思路跟那道三数之和很相似，都是先确定一个数，然后用两个指针left和right来滑动寻找另外两个数，每确定两个数，
我们求出此三数之和，然后算和给定值的差的绝对值存在newDiff中，然后和diff比较并更新diff和结果closest即可
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int ret = Integer.MAX_VALUE;
        int gap = Integer.MAX_VALUE;
        Arrays.sort(nums);
        for (int i=0; i<nums.length-2; i++) {
            
            int left = i+1;
            int right = nums.length-1;
            while (left < right) {
                if (gap > Math.abs(nums[i] + nums[left] + nums[right]-target)) {
                    gap = Math.abs(nums[i] + nums[left] + nums[right]-target);
                    ret = nums[i] + nums[left] + nums[right];
                }
                if (nums[i] + nums[left] + nums[right] == target) {
                    return target;
                } else if (nums[i] + nums[left] + nums[right] > target) {
                    right--;
                } else {
                    left++;
                }
            }
            
        }
        return ret;
        
    }
}

/*http://www.cnblogs.com/grandyang/p/5235086.html
题目中的Follow up让我们在O(n^2)的时间复杂度内实现，那么我们借鉴之前那两道题3Sum Closest和3Sum中的方法，采用双指针来做，
这里面有个trick就是当判断三个数之和小于目标值时，此时结果应该加上right-left，以为数组排序了以后，如果加上num[right]小于目标值
的话，那么加上一个更小的数必定也会小于目标值，然后我们将左指针右移一位，否则我们将右指针左移一位*/
class Solution {
    public int threeSumSmaller(int[] nums, int target) {
        int ret = 0;
        Arrays.sort(nums);
        for (int i=0; i<nums.length-2; i++) {
            int left = i+1;
            int right = nums.length-1;
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                if (sum >= target) {
                    right--;
                } else {
                    ret += right-left;
                    left++;
                }
                
            }
        }
        return ret;
    }
}
