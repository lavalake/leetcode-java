might be better to include some explanation as the implementation is a bit abstract.

traverse the array once and create the node one by one. and use stack to store a decreasing sequence.
each step, we create a new curNode. compare to the peek of stack,
2.a. keep popping the stack while (stack.peek().val < curNode.val), and set the last popping node to be curNode.left.
Because the last one fulfilling the criteria is the largest number among curNode's left children. => curNode.left = last pop node
2.b. after popping up all nodes that fulfill (stack.peek().val < curNode.val),
thus (stack.peek().val > curNode.val), the stack.peek() is curNode's root => peek.right = curNode
return the bottom node of stack.
