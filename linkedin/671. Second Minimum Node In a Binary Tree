671. Second Minimum Node In a Binary Tree
Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes.

Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.

If no such second minimum value exists, output -1 instead.

Example 1:
Input: 
    2
   / \
  2   5
     / \
    5   7

Output: 5
Explanation: The smallest value is 2, the second smallest value is 5.
Example 2:
Input: 
    2
   / \
  2   2

Output: -1
Explanation: The smallest value is 2, but there isn't any second smallest value.

root.val is the smallest value in the tree.
traverse from root, if it's value equals smallest value, then compare the other value with seconde smallest value.
the smallest value of the other child which is not equal to root.val is the second smallest value
Note the specail case, both left and right child equals to the smallest value.

class Solution {
    public int findSecondMinimumValue(TreeNode root) {
        int ret = Integer.MAX_VALUE, min = root.val;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while (!q.isEmpty()) {
            TreeNode temp = q.poll();
            if (temp.left != null) {
                if (temp.left.val == min)
                    q.offer(temp.left);
                else
                    ret = Math.min(ret, temp.left.val);
            }
            if (temp.right != null ) {
                if (temp.right.val == min)
                    q.offer(temp.right);
                else
                    ret = Math.min(ret, temp.right.val);
            }
            
        }
        return ret==Integer.MAX_VALUE?-1:ret;
    }
}
