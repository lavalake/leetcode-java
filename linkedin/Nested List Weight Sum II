339. Nested List Weight Sum
https://leetcode.com/problems/nested-list-weight-sum/description/
class Solution {
    public int depthSum(List<NestedInteger> nestedList) {
        return helper(nestedList, 1);
    }
    private int helper(List<NestedInteger> input, int level) {
        if (input == null) return 0;
        Iterator<NestedInteger> itr = input.iterator();
        int sum = 0;
        while (itr.hasNext()) {
            NestedInteger n = itr.next();
            if (n.isInteger()) {
                sum += level * n.getInteger();
            } else {
                sum += helper(n.getList(), level+1);
            }
        }
        return sum;
    }
}

use level traversal. Calculate the integer sum of every level
calculate the total level
then multi levelValue * level
https://leetcode.com/problems/nested-list-weight-sum-ii/description/
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
class Solution {
    public int depthSumInverse(List<NestedInteger> nestedList) {
        int ret = 0;
        Queue<List<NestedInteger>> nestedListQueue = new LinkedList<>();
        List<Integer> valueList = new LinkedList<>();
        nestedListQueue.add(nestedList);
        while (!nestedListQueue.isEmpty()) {
            int size = nestedListQueue.size();
            int levelValue = 0;
            for (int n=0; n<size; n++) {
            List<NestedInteger> cur = nestedListQueue.poll();
            
            for (NestedInteger i : cur) {
                if (i.isInteger()) {
                    levelValue += i.getInteger();
                }
                else {
                    nestedListQueue.add(i.getList());
                }
            }
            }
            valueList.add(levelValue);
        }
        int level = valueList.size();
        for (int i=0; i<valueList.size(); i++) {
            ret += valueList.get(i) * level;
            level--;
        }
        return ret;
    }
}


341. Flatten Nested List Iterator
https://leetcode.com/problems/flatten-nested-list-iterator/description/

/*special case
[[]]

for empty list, we need check it in hasNext() and guarantee the top of stack is integer.
*/
public class NestedIterator implements Iterator<Integer> {
    Deque<NestedInteger> stack;
    public NestedIterator(List<NestedInteger> nestedList) {
        stack = new LinkedList<>();
        pushNodes(stack, nestedList);
    }

    @Override
    public Integer next() {
        
        return stack.pop().getInteger();
            
    }

    @Override
    public boolean hasNext() {
        while (!stack.isEmpty() && !stack.peek().isInteger()) {
            
                NestedInteger node = stack.pop();
                pushNodes(stack, node.getList());
            
        }
        return !stack.isEmpty();
    }
    private void pushNodes(Deque<NestedInteger> stack, List<NestedInteger> root) {
        for (int i=root.size()-1; i>=0; i--) {
            NestedInteger node = root.get(i);
            
                stack.push(node);
        }
        
    }
}
