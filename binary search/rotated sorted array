roated sorted array关键是找到单调区间。
153. Find Minimum in Rotated Sorted Array
最小值一定不再单调区间内。所以可以排除单调区间。
优先排除右部。如果array没有rotate，最小值在最左边。
/*
special case
1 2 3
when we chose monotical side, we chose right. if mid < right, then we think right side is monotical 
so move right to mid
if we check left, if the array is not rotated, then will have bug
*/
class Solution {
    public int findMin(int[] nums) {
        int left = 0, right = nums.length-1;
        while (left+1 < right) {
            int mid = left + (right-left)/2;
            if (nums[mid] < nums[right]) {
                right = mid;
            } else {
                left = mid;
            }
        }
        return Math.min(nums[left], nums[right]);
    }
}

33. Search in Rotated Sorted Array

此题的关键是找到单调区间。只可能有一边是单调的。然后比较mid和单调区间的头，确定target在那一边。
因为单调区间相对容易处理。排除不在单调区间，则在另外一边。
//key of this problem is to find the increasing segment. the left and right of min can only one be increasing.

class Solution {
    public int search(int[] nums, int target) {
        int ret = 0;
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[left] <= nums[mid]) { //!!!!!here must <=, because when left==mid, test case [3,1] 1
                if (nums[left] <= target && nums[mid] > target) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else {
                if (nums[right] >= target && nums[mid] < target) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return -1;
    }
}


81. Search in Rotated Sorted Array II
https://leetcode.com/problems/search-in-rotated-sorted-array-ii/description/
/*
https://leetcode.com/problems/search-in-rotated-sorted-array-ii/discuss/28202/Neat-JAVA-solution-using-binary-search
test case
[3,1] 1
[1,3,1,1] 1
*/
class Solution {
    public boolean search(int[] nums, int target) {
        int ret = 0;
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                return true;
            }
            //if left is sorted. because there could be duplicate, we need check left and right. either one
            //is true, then left if sorted
            // for non-duplicate case, we can use <= to check left. but for duplicated, it does not work
            if (nums[left] < nums[mid] || nums[mid] > nums[right]) {
                if (nums[left] <= target && nums[mid] > target) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else if (nums[right] > nums[mid] || nums[mid] > nums[left]){//right is sorted
                if (nums[right] >= target && nums[mid] < target) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            } else {
                //if reach here, means nums[left]==nums[right]==nums[mid], then move left or right will work
                right--;
            }
        }
        return false;
    }
}
