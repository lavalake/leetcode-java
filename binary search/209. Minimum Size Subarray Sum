209. Minimum Size Subarray Sum

Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.
Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 

First solution is O(N). Use two pointers.
One is the left side, one is right side. If sum < s, move right and add to sum.
If sum > s, deduct left and move left.

pay attension to the edge case

class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        if (nums.length == 0) return 0;
        int left = 0, right = 0;
        int sum = 0;
        int minLen = Integer.MAX_VALUE;
        for (int i=0; i<nums.length; i++) {
            sum += nums[right++];
            while (sum >= s && (left < right)) {
                minLen = Math.min(right-left, minLen);
                sum -= nums[left++];
            }
        }
        return minLen==Integer.MAX_VALUE?0:minLen;
    }
}
