
https://leetcode.com/problems/range-sum-query-mutable/description/
class NumArray {
    Node root;
    public class Node {
        int left, right;
        Node leftNode, rightNode;
        int sum;
        public Node(int left, int right) {
            this.left = left;
            this.right = right;
        }
    }
    private Node buildTree(int[] nums, int left, int right) {
        Node newNode = new Node(left, right);
        if (left > right) return null;
        if (left == right) {
            newNode.sum = nums[left];
            return newNode;
        }
        newNode.leftNode = buildTree(nums, left, left+(right-left)/2);
        newNode.rightNode = buildTree(nums, left+(right-left)/2+1, right);
        newNode.sum = newNode.leftNode.sum + newNode.rightNode.sum;
        return newNode;
    }
    public NumArray(int[] nums) {
        root = buildTree(nums, 0, nums.length-1);
    }
    
    public void update(int i, int val) {
        updateTree(root, i, val);
    }
    private void updateTree(Node node, int i, int val) {
        if (node.left == i && node.right == i){
            node.sum = val;
            return;
        } 
        int mid = node.left + (node.right - node.left)/2;
        if (i > mid) updateTree(node.rightNode, i, val);
        else updateTree(node.leftNode, i, val);
        node.sum = node.leftNode.sum + node.rightNode.sum;
    }
    public int sumRange(int i, int j) {
        return calSum(root, i, j);
    }
    private int calSum(Node node, int i, int j) {
        if (node.left == i && node.right == j) return node.sum;
        int mid = node.left + (node.right - node.left)/2;
        if (i > mid) return calSum(node.rightNode, i, j);
        if (j <= mid) return calSum(node.leftNode, i, j);
        return calSum(node.leftNode, i, mid) + calSum(node.rightNode, mid+1, j);
    }
}


BIT version
https://leetcode.com/problems/range-sum-query-mutable/discuss/75753/Java-using-Binary-Indexed-Tree-with-clear-explanation
/**
	 * Binary Indexed Trees (BIT or Fenwick tree):
	 * https://www.topcoder.com/community/data-science/data-science-
	 * tutorials/binary-indexed-trees/
	 * 
	 * Example: given an array a[0]...a[7], we use a array BIT[9] to
	 * represent a tree, where index [2] is the parent of [1] and [3], [6]
	 * is the parent of [5] and [7], [4] is the parent of [2] and [6], and
	 * [8] is the parent of [4]. I.e.,
	 * 
	 * BIT[] as a binary tree:
	 *            ______________*
	 *            ______*
	 *            __*     __*
	 *            *   *   *   *
	 * indices: 0 1 2 3 4 5 6 7 8
	 * 
	 * BIT[i] = ([i] is a left child) ? the partial sum from its left most
	 * descendant to itself : the partial sum from its parent (exclusive) to
	 * itself. (check the range of "__").
	 * 
	 * Eg. BIT[1]=a[0], BIT[2]=a[1]+BIT[1]=a[1]+a[0], BIT[3]=a[2],
	 * BIT[4]=a[3]+BIT[3]+BIT[2]=a[3]+a[2]+a[1]+a[0],
	 * BIT[6]=a[5]+BIT[5]=a[5]+a[4],
	 * BIT[8]=a[7]+BIT[7]+BIT[6]+BIT[4]=a[7]+a[6]+...+a[0], ...
	 * 
	 * Thus, to update a[1]=BIT[2], we shall update BIT[2], BIT[4], BIT[8],
	 * i.e., for current [i], the next update [j] is j=i+(i&-i) //double the
	 * last 1-bit from [i].
	 * 
	 * Similarly, to get the partial sum up to a[6]=BIT[7], we shall get the
	 * sum of BIT[7], BIT[6], BIT[4], i.e., for current [i], the next
	 * summand [j] is j=i-(i&-i) // delete the last 1-bit from [i].
	 * 
	 * To obtain the original value of a[7] (corresponding to index [8] of
	 * BIT), we have to subtract BIT[7], BIT[6], BIT[4] from BIT[8], i.e.,
	 * starting from [idx-1], for current [i], the next subtrahend [j] is
	 * j=i-(i&-i), up to j==idx-(idx&-idx) exclusive. (However, a quicker
	 * way but using extra space is to store the original array.)
	 */
     pay attention to the index of tree and num
tree index start from 1 [1, nums.length]
so tree[1] = nums[0]
tree[2] = nums[0] + nums[1]
tree[3] = nums[2]


class NumArray {
    int[] tree;
    int[] mNums;
    public NumArray(int[] nums) {
        tree = new int[nums.length+1];
        mNums = new int[nums.length];
        for (int i=0; i<nums.length; i++) {
            update(i, nums[i]);
        }
                this.mNums = nums;

    }
    
    public void update(int i, int val) {
        int delta = val - mNums[i];
        mNums[i] = val;
                i = i + 1;

        while (i < tree.length) {
            tree[i] += delta;
            i += i&(-i);
        }
    }
    
    public int sumRange(int i, int j) {
        //i = i-1;
        int sum1=0;
        while (i > 0) {
            sum1 += tree[i];
            i -= i&(-i);
        }
        int sum2 = 0;
        j = j+1;
        while (j > 0) {
            sum2 += tree[j];
            j -= j&(-j);
        }
       return sum2 - sum1;
    }
}
