https://leetcode.com/problems/arithmetic-slices/description/
定义一个一维dp数组，其中dp[i]表示，到i位置为止的算数切片的个数，那么我们从第三个数字开始遍历，
如果当前数字和之前两个数字构成算数切片，那么我们更新dp[i]为dp[i-1]+1，然后res累加上dp[i]的值即可
***************
the key point is dp[i] = dp[i-1]+1
***************
class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        if (A.length < 3) return 0;
        int res=0, len=A.length;
        int[] dp = new int[A.length];
        dp[0] = 0;
        dp[1] = 0;
        for (int i=2; i<len; i++) {
            if (A[i]-A[i-1]==A[i-1]-A[i-2]) {
                dp[i] = dp[i-1]+1;
                res += dp[i];
            } else {
                dp[i] = 0;
            }
        }
        
        return res;
    }
}
we can use a count to replcae the dp[] because we do not need store all count. Only current count is needed
class Solution {
    public int numberOfArithmeticSlices(int[] A) {
        if (A.length < 3) return 0;
        int res=0, len=A.length;
        int count = 0;
        
        for (int i=2; i<len; i++) {
            if (A[i]-A[i-1]==A[i-1]-A[i-2]) {
                count++;
                res += count;
            } else {
                count = 0;
            }
        }
        
        return res;
    }
}

