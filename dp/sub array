
1. Continuous Subarray Sum
https://leetcode.com/problems/continuous-subarray-sum/description/
Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.
http://www.cnblogs.com/grandyang/p/6504158.html
calculate sum array
class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        int[] sum = new int[nums.length+1];
        for (int i=1; i<=nums.length; i++) {
            sum[i] = sum[i-1] + nums[i-1];
        }
        for (int i=2; i<sum.length; i++) {
            for (int j=0; j<i-1; j++) {
                int sub = k==0?sum[i]-sum[j]:(sum[i]-sum[j])%k;
                if (sub==0) return true;
            }
        }
        return false;
    }
}
下面这种方法用了些技巧，那就是，若数字a和b分别除以数字c，若得到的余数相同，那么(a-b)必定能够整除c。这里就不证明了，博主也不会证明。
明白了这条定理，那么我们用一个集合set来保存所有出现过的余数，如果当前的累加和除以k得到的余数在set中已经存在了，那么说明之前必定有
一段子数组和可以整除k。需要注意的是k为0的情况，由于无法取余，我们就把当前累加和放入set中。还有就是题目要求子数组至少需要两个数字，
那么我们需要一个变量pre来记录之前的和，我们每次存入set中的是pre，而不是当前的累积和，
需要注意，为了计算从nums［0］开始的sum， 需要加一个额外的（0，0）。 nums［0］对应i＝1
class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        int sum = 0;
        Map<Integer,Integer> mem = new HashMap<>();
        mem.put(0,0);
        for (int i=0; i<nums.length; i++) {
            sum += nums[i];
            int t = k==0?sum:sum%k;
            if (mem.containsKey(t)) {
                int prev = mem.get(t);
                if (i-prev + 1 > 1) return true;
            } else {
                mem.put(t,i+1);
            }
        }
        return false;
    }
}


152. Maximum Product Subarray
https://leetcode.com/problems/maximum-product-subarray/discuss/48230/Possibly-simplest-solution-with-O(n)-time-complexity
The problem is that it depends not only on a state (the largest product that can be obtained by a sequence ending in the previous number), but two states (the largest and smallest products). A simpler dp problem might just create a dp[] and put the maximum value in it(in this case, the largest product). But this solution show us a new way: Our dp array can store more data than just a single value. The reason why the above solution does not use the dp array is that dp[i] only depends on dp[i - 1] so there is no need to save all the previous max and min data, just save the previous max and min value(dp[i - 1]). The following code uses the custom inner class Tuple so that both imax and imin can be stored, and all imax and imin are stored in the dp array. Although it is a bit more complicated, it helps to deepen understanding.
这道题妙就妙在它不仅仅依赖了一个状态（前一个数所能获得的最大乘积），而是两个状态（最大和最小乘积）。比较简单的dp问题可能就只是会建立一个dp[]，然后把最大值放到其中。但是这道题给我们打开了新的思路：我们的dp数组里面可以存更多的信息。而上面的解法之所以没有用dp数组的原因是dp[i]只依赖于dp[i - 1]因此没有必要把前面所有的信息都存起来，只需要存前一个dp[i-1]的最大和最小的乘积就可以了。下面的代码使用了自定义的内部类Tuple,从而可以同时存imax和imin,并将所有的imax和imin存到了dp数组中。虽然稍显复杂，但是有助于加深理解。

class Solution {
    public int maxProduct(int[] nums) {
        Tuple[] dp = new Tuple[nums.length];
        dp[0] = new Tuple(nums[0],nums[0]);
        int res = dp[0].imax;
        for (int i = 1; i < nums.length; i++) {
            Tuple prev = dp[i - 1];
            int imax = Math.max(Math.max(nums[i], nums[i] * prev.imax) , nums[i] * prev.imin);
            int imin = Math.min(Math.min(nums[i], nums[i] * prev.imax) , nums[i] * prev.imin);
            dp[i] = new Tuple(imax,imin);
            res = Math.max(imax, res);
        }
        return res;
    }
    
    class Tuple {
        private int imax;
        private int imin;
        private Tuple(int imax, int imin) {
            this.imax = imax;
            this.imin = imin;
        }
    }
}

class Solution {
    public int maxProduct(int[] nums) {
        int max = Integer.MIN_VALUE;
        int preMin = 1, preMax = 1;
        for (int n : nums) {
            int curMax = Math.max(Math.max(preMax*n, preMin*n), n);
            int curMin = Math.min(Math.min(preMax*n, preMin*n), n);
            preMax = curMax;
            preMin = curMin;
            max = Math.max(curMax, max);
        }
        return max;
    }
}
