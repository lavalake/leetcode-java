256. Paint House
https://leetcode.com/problems/paint-house/description/
There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Example:

Input: [[17,2,17],[16,16,5],[14,3,19]]
Output: 10
Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. 
             Minimum cost: 2 + 5 + 3 = 10.
minRed(n) = Math.min(blue(n-1),green(n-1)) + red;

class Solution {
    public int minCost(int[][] costs) {
        int costRed = 0, costBlue = 0, costGreen = 0;
        for (int[] cost : costs) {
            int newCostRed = Math.min(costBlue, costGreen) + cost[0];
            int newCostBlue = Math.min(costRed, costGreen) + cost[1];
            int newCostGreen = Math.min(costRed, costBlue) + cost[2];
            costRed = newCostRed;
            costBlue = newCostBlue;
            costGreen = newCostGreen;
        }
        return costRed < Math.min(costBlue,costGreen)?costRed:Math.min(costBlue,costGreen);
    }
}


265. Paint House II
https://leetcode.com/problems/paint-house-ii/description/
There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.
generalization of previous problem
For K colors, we only need to memerize the min and secondMin value of last round and the index of min.
If current index equas index of min of last round, we user secondMin, then we use min.
Notes, when calculate current house round, we need use temp min to memerize and update the min after all colors.

class Solution {
    public int minCostII(int[][] costs) {
        int minCost = 0, secondMinCost = 0;
        int minIndex = -1;
        for (int[] cost : costs) {
            int newMinCost = Integer.MAX_VALUE, newSecondMinCost = Integer.MAX_VALUE;
            int pickValue = 0;
            int tempMinIndex = -1;
            for (int i=0; i<cost.length; i++) {
                pickValue = cost[i] + (minIndex!=i?minCost:secondMinCost);
                if (newMinCost > pickValue) {
                    newSecondMinCost = newMinCost;
                    newMinCost = pickValue;
                    tempMinIndex = i;
                } else {
                    if (newSecondMinCost > pickValue) {
                        newSecondMinCost = pickValue;
                    }
                }
            }
            minCost = newMinCost;
            secondMinCost = newSecondMinCost;
            minIndex = tempMinIndex;
        }
        
        return minCost;
    }
}
