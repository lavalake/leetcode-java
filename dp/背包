1. 01背包
N件物品放入容量V的背包，每种物品只有一件，没有重复。
recursive, every object has two options, select or not. SO the time complexity is 2N.

search(N,V,C[0],W[0],1)
search(N,V,0,0,1)
search() {
  if (index >= N) || (w + w[index] > V) maxW = Math.max(maxW, w);
  search(N,V,c+C[index], w+w[index],index+1)
  search(N,V,c,w,index+1)
  
DP Solution
如果只考虑第i个物品的策略，放或者不放，定义
F[i,v] i个物品放入容量为v的背包的最大价值。
F[i,v]有两种情况，放或者不放。不放i，则F[i,v] = F[i-1,v]. select i, F[i,v] = F[i-1,v-c[i]]+w[i]
so
F[i,v] = max{F[i-1,v], F[i-1,v-c[i]]+w[i]}

F[0, 0..V] = 0
for i = 1 to N
  for v = 0 to C[i]
    F[i,v] = F[i-1,v]
  for v = C[i] to V
    F[i,v] = max{F[i-1,v], F[i-1, v-C[i]]+W[i]}

The time and space complexity is O(VN). We can optimize space complexity to O(V).
Use one dimention array F[V], this equals F[i,V]. That means we only memorize the max value for current object.
Because when we calculate i+1, we only need current value of i. F[i-1,V] and F[i-1,v-c[i]]. So no need to use two
dimention array to recored all previous calculation. 
F[0..V] = 0
for i = 0 to N
  for v = V to C[i]
    F[v] = max{F[v], F[v-C[i]]+W[i]}

2. 完全背包
N种物品用量为V的背包，物品可以无限次取。求放满背包的最大价值
F(i,v) = max{F(i-1,v-kC)+kW[i]} 0<=k<=v/ci
O(VN)
i = 0, N
  v = ci, V
    F(v) = max{F(v), F(v-ci)+wi}
The only difference with 01 backpack is v from Ci to V.
This is because I can be used any times. So the next iteration of v could be based on a F(v) which already picked object I.
but 01 backpack can only be picked once. So we need iterate from N to Ci to guarantee when we calculate, the F(v) is value
that not picked object I.
for example:
object cost is 3
F(3) = max(F(3), F(0)+3}
F(4) = max(F(4), F(1)+3}
F(5) = max(F(5), F(2)+3}
F(6) = max(F(6), F(3)+3}
here F(6) is based on F(3) which is already consider object 3. So object 3 could be picked multiple times.
