1. user brutal force recursive
http://www.cnblogs.com/grandyang/p/6395843.html
for every number, two cases:
1. select -
2. select +
for every numver, recursively call the search to times
class Solution {
    
    public int findTargetSumWays(int[] nums, int S) {
        
        return search(nums, S, 0, 0);
    }
    private int search(int[] nums, int target, int sum, int index) {
        if (index == nums.length) {
            
            return sum == target? 1:0;
        }
        return search(nums, target, sum+nums[index]*(-1), index+1) + 
                search(nums, target, sum+nums[index], index+1);
    }
}

from burtal force to dp
memrization solution. Use a ArrayLIst<Map<>>, for every index, we could calculate different target value and could
calculate multi times. Map<Index,target> to memerizae the calculation
class Solution {
    
    public int findTargetSumWays(int[] nums, int S) {
        List<Map<Integer,Integer>> mem = new ArrayList<>();
        for (int i=0; i<nums.length; i++) {
            mem.add(new HashMap<Integer,Integer>());
        }
        return search(nums, S, 0, mem);
    }
    private int search(int[] nums, int target, int index, List<Map<Integer,Integer>> mem) {
        if (index == nums.length) {
            
            return target == 0? 1:0;
        }
        if (mem.get(index) != null && mem.get(index).containsKey(target)) return mem.get(index).get(target);
        int value = search(nums, target+nums[index], index+1, mem) + 
                search(nums, target-nums[index], index+1, mem);
        mem.get(index).put(target,value);
        return value;
    }
}

Dp solution
https://blog.csdn.net/mine_song/article/details/70216562
来源http://blog.csdn.net/hit0803107/article/details/54894227


【问题分析】

1、该问题求解数组中数字只和等于目标值的方案个数，每个数字的符号可以为正或负(减整数等于加负数)。

2、该问题和矩阵链乘很相似，是典型的动态规划问题

3、举例说明: nums = {1,2,3,4,5}, target=3, 一种可行的方案是+1-2+3-4+5 = 3

     该方案中数组元素可以分为两组，一组是数字符号为正(P={1,3,5})，另一组数字符号为负(N={2,4})

     因此: sum(1,3,5) - sum(2,4) = target

              sum(1,3,5) - sum(2,4) + sum(1,3,5) + sum(2,4) = target + sum(1,3,5) + sum(2,4)

              2sum(1,3,5) = target + sum(1,3,5) + sum(2,4)

              2sum(P) = target + sum(nums)

              sum(P) = (target + sum(nums)) / 2

     由于target和sum(nums)是固定值，因此原始问题转化为求解nums中子集的和等于sum(P)的方案个数问题

4、求解nums中子集合只和为sum(P)的方案个数(nums中所有元素都是非负)

      该问题可以通过动态规划算法求解

      举例说明：给定集合nums={1,2,3,4,5}, 求解子集，使子集中元素之和等于9 = new_target = sum(P) = (target+sum(nums))/2

              定义dp[10]数组, dp[10] = {1,0,0,0,0,0,0,0,0,0}

              dp[i]表示子集合元素之和等于当前目标值的方案个数, 当前目标值等于9减去当前元素值

              当前元素等于1时，dp[9] = dp[9] + dp[9-1]

                                            dp[8] = dp[8] + dp[8-1]

                                            ...

                                            dp[1] = dp[1] + dp[1-1]

              当前元素等于2时，dp[9] = dp[9] + dp[9-2]

                                            dp[8] = dp[8] + dp[8-2]

                                            ...

                                            dp[2] = dp[2] + dp[2-2]

              当前元素等于3时，dp[9] = dp[9] + dp[9-3]

                                            dp[8] = dp[8] + dp[8-3]

                                            ...

                                            dp[3] = dp[3] + dp[3-3]

              当前元素等于4时，

                                            ...

              当前元素等于5时，

                                           ...

                                           dp[5] = dp[5] + dp[5-5]

             最后返回dp[9]即是所求的解

https://leetcode.com/problems/target-sum/discuss/97369/evolve-from-brute-force-to-dp

2. Partition Equal Subset Sum
