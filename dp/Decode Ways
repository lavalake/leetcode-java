91. Decode Ways
https://leetcode.com/problems/decode-ways/description/
to case:
1. current number 1-9, means we reach current number from dp[i-1]
2. current plus previous number 10 - 26, means we can reach current number from dp[i-2]

class Solution {
    public int numDecodings(String s) {
        if (s.length() == 0 || s.charAt(0) == '0') return 0;
        int[] dp = new int[s.length()+1];
        dp[0] = 1;
        //dp[1] = 1;
        for (int i=1; i<=s.length(); i++) {
            if (s.charAt(i-1) != '0') {
                dp[i] = dp[i-1];
            }
            if (i >= 2 && s.charAt(i-2) != '0') {
                int two = Integer.valueOf(s.substring(i-2, i));
                if (two >= 10 && two <= 26) dp[i] += dp[i-2];
            }
            
            
            
            
        }
        return dp[s.length()];
        
    }
}

639. Decode Ways II
1. current is not '0'
dp[i] += dp[i-1]
2. current is *
dp[i] += 8*dp[i-1]
3. pre is 1 or *
    dp[i] += dp[i-2]
    current is *
        dp[i] += 8*dp[i-2]
4. pre is 2 or *
    current '0' - '6'
        dp[i] += dp[i-2]
    current is '*'
        dp[i] += 6*dp[i-2]
        
class Solution {
    public int numDecodings(String s) {
        long[] dp = new long[s.length()+1];
        dp[0] = 1;
        for (int i=1; i<=s.length(); i++) {
            char c = s.charAt(i-1);
            if (c != '0') dp[i] = dp[i-1];
            if (c == '*') dp[i] += 8*dp[i-1];
            if (i >= 2) {
                char pre = s.charAt(i-2);
                if (pre == '1' || pre == '*') {
                    dp[i] += dp[i-2];
                    if (c == '*') dp[i] += dp[i-2] * 8;
                } 
                if ((pre == '2' || pre == '*')) {
                    if (c >= '0' && c <= '6') dp[i] += dp[i-2];
                    else if (c == '*') dp[i] += dp[i-2] * 6;
                }
            }
            dp[i] %= 1000000007;
        }
        return (int)dp[s.length()];
    }
}
