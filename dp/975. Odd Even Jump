You are given an integer array A.  From some starting index, you can make a series of jumps.  The (1st, 3rd, 5th, ...) jumps 
in the series are called odd numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even numbered jumps.

You may from index i jump forward to index j (with i < j) in the following way:

During odd numbered jumps (ie. jumps 1, 3, 5, ...), you jump to the index j such that A[i] <= A[j] and A[j] is the smallest 
possible value.  If there are multiple such indexes j, you can only jump to the smallest such index j.
During even numbered jumps (ie. jumps 2, 4, 6, ...), you jump to the index j such that A[i] >= A[j] and A[j] is the largest 
possible value.  If there are multiple such indexes j, you can only jump to the smallest such index j.
(It may be the case that for some index i, there are no legal jumps.)
A starting index is good if, starting from that index, you can reach the end of the array (index A.length - 1) by jumping 
some number of times (possibly 0 or more than once.)
Input: [10,13,12,14,15]
Output: 2
Explanation: 
From starting index i = 0, we can jump to i = 2 (since A[2] is the smallest among A[1], A[2], A[3], A[4] that is greater or 
equal to A[0]), then we can't jump any more.
From starting index i = 1 and i = 2, we can jump to i = 3, then we can't jump any more.
From starting index i = 3, we can jump to i = 4, so we've reached the end.
From starting index i = 4, we've reached the end already.
In total, there are 2 different starting indexes (i = 3, i = 4) where we can reach the end with some number of jumps.
Return the number of good starting indexes.

https://leetcode.com/problems/odd-even-jump/discuss/217974/Java-solution-DP-+-TreeMap
First let's create a boolean DP array.
dp[i][0] stands for you can arrive index n - 1 starting from index i at an odd step.
dp[i][1] stands for you can arrive index n - 1 starting from index i at an even step.
Initialization:
Index n - 1 is always a good start point, regardless it's odd or even step right now. Thus dp[n - 1][0] = dp[n - 1][1] = true.
DP formula:
dp[i][0] = dp[index_next_greater_number][1] - because next is even step
dp[i][1] = dp[index_next_smaller_number][0] - because next is odd step
Result:
Since first step is odd step, then result is count of dp[i][0] with value true.

To quickly find the next greater or smaller number and its index: traverse the array reversely and store data into a TreeMap 
using the number as Key and its index as Value.

Time complexity O(nlgn), Space complexity O(n). n is the length of the array.

class Solution {
    public int oddEvenJumps(int[] A) {
        TreeMap<Integer,Integer> map = new TreeMap<>();
        boolean[][] dp = new boolean[A.length][2];
        dp[A.length-1][0] = true;
        dp[A.length-1][1] = true;
        int cnt = 1;
        map.put(A[A.length-1], A.length-1);
        for (int i=A.length-2; i>=0; i--) {
            Map.Entry<Integer,Integer> high = map.ceilingEntry(A[i]);
            if (high != null && dp[high.getValue()][1]) {
                dp[i][0] = true;
            }
            Map.Entry<Integer,Integer> low = map.floorEntry(A[i]);
            if (low != null && dp[low.getValue()][0]) {
                dp[i][1] = true;
            }
            cnt= dp[i][0]?cnt+1:cnt;
            map.put(A[i],i);
        }
        return cnt;
    }
}
