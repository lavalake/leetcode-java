1. house robber
https://leetcode.com/problems/house-robber/description/
recursive
/*thisi is brutal force*/
class Solution {
    public int rob(int[] nums) {
         return search(0, nums);
    }
    private int search(int i, int[] nums) {
        if(i > nums.length-1) return 0;
        return Math.max(search(i+2, nums)+nums[i], search(i+1, nums));
    }
}

class Solution {
    public int rob(int[] nums) {
        if (nums.length == 0) return 0;
         int[] dp = new int[nums.length+1];
        dp[0] = 0;
        dp[1] = nums[0];
        for (int i=2; i<=nums.length; i++) {
            dp[i] = Math.max(dp[i-2]+nums[i-1], dp[i-1]);
        }
        return dp[nums.length];
    }
    
}


2. paint fence

brutal force first
class Solution {
    private static final int COLOR_COUNT = 3;
    public int minCost(int[][] costs) {
        if (costs.length == 0 || costs[0].length == 0) return 0;
        int minxCost = 0;
        int costWithColor1 = search(costs, 1, 0) + costs[0][0];
        int costWithColor2 = search(costs, 1, 1) + costs[0][1];
        int costWithColor3 = search(costs, 1, 2) + costs[0][2];
        return Math.min(Math.min(costWithColor1,costWithColor2), costWithColor3);
    }
    private int search(int[][] costs, int house, int color) {
        if (house > costs.length-1) return 0;
        int costWithColor1 = search(costs, house+1, (color+1)%COLOR_COUNT) + costs[house][(color+1)%COLOR_COUNT];
        int costWithColor2 = search(costs, house+1, (color+2)%COLOR_COUNT) + costs[house][(color+2)%COLOR_COUNT];
        return Math.min(costWithColor1, costWithColor2);
    }
}

DP bottom up. dp[house][color]
class Solution {
    private static final int COLOR_COUNT = 3;
    public int minCost(int[][] costs) {
        if (costs.length == 0 || costs[0].length == 0) return 0;
        int[][] dp = new int[costs.length+1][costs[0].length];
        dp[0][0] = 0;
        dp[0][1] = 0;
        dp[0][2] = 0;
        for (int i=1; i<=costs.length; i++) {
            for (int j=0; j<costs[0].length; j++) {
                dp[i][j] = Math.min(dp[i-1][(j+1)%3], dp[i-1][(j+2)%3]) + costs[i-1][j];
            }
        }
        return Math.min(Math.min(dp[costs.length][0], dp[costs.length][1]), dp[costs.length][2]);
    }
    
}

3. House Robber II
https://leetcode.com/problems/house-robber-ii/discuss/59934/Simple-AC-solution-in-Java-in-O(n)-with-explanation
/* two pass: 1. no nums[n-1], 2. no nums[0]
Since this question is a follow-up to House Robber, we can assume we already have a way to solve the simpler question, i.e. given a 1 row of house, we know how to rob them. So we already have such a helper function. We modify it a bit to rob a given range of houses.

private int rob(int[] num, int lo, int hi) {
    int include = 0, exclude = 0;
    for (int j = lo; j <= hi; j++) {
        int i = include, e = exclude;
        include = e + num[j];
        exclude = Math.max(e, i);
    }
    return Math.max(include, exclude);
}
Now the question is how to rob a circular row of houses. It is a bit complicated to solve like the simpler question. It is because in the simpler question whether to rob num[lo] is entirely our choice. But, it is now constrained by whether num[hi] is robbed.

However, since we already have a nice solution to the simpler problem. We do not want to throw it away. Then, it becomes how can we reduce this problem to the simpler one. Actually, extending from the logic that if house i is not robbed, then you are free to choose whether to rob house i + 1, you can break the circle by assuming a house is not robbed.

For example, 1 -> 2 -> 3 -> 1 becomes 2 -> 3 if 1 is not robbed.

Since every house is either robbed or not robbed and at least half of the houses are not robbed, the solution is simply the larger of two cases with consecutive houses, i.e. house i not robbed, break the circle, solve it, or house i + 1 not robbed. Hence, the following solution. I chose i = n and i + 1 = 0 for simpler coding. But, you can choose whichever two consecutive ones.

public int rob(int[] nums) {
    if (nums.length == 1) return nums[0];
    return Math.max(rob(nums, 0, nums.length - 2), rob(nums, 1, nums.length - 1));
}
class Solution {
    public int rob(int[] nums) {
        if (nums.length == 0) return 0;
        int p1=0, p2=0;
        int max1 = nums[0];
        for (int i=0; i<nums.length-1; i++) {
            max1 = Math.max(p1, p2+nums[i]);
            p2 = p1;
            p1 = max1;
        }
        p1 = 0;
        p2 = 0;
        int max2 = 0;
        for (int i=1; i<nums.length; i++) {
            max2 = Math.max(p1, p2+nums[i]);
            p2 = p1;
            p1 = max2;
        }
        return Math.max(max1, max2);
    }
}
