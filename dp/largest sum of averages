https://leetcode.com/problems/largest-sum-of-averages/discuss/122775/Java-bottom-up-DP-with-Explanation
Let f[i][j]be the largest sum of averages for first i + 1 numbers(A[0], A[1], ... , A[i]) tojgroups. f[i][j] consists of two parts: first j-1 groups' averages and the last group' s average. Considering the last group, its last number must be A[i] and its first number can be from A[0] to A[i]. Suppose the last group starts from A[p+1], we can easily get the average form A[p+1] to A[i]. The sum of first j-1 groups' average is f[p][j-1] which we have got before. So now we can write the DP equation:
f[i][j] = max {f[p][j-1] + (A[p+1] + A[p+2] + ... + A[i]) / (i - p)}, p = 0,1,...,i-1

class Solution {
    public double largestSumOfAverages(int[] A, int K) {
        double[][] dp = new double[A.length+1][K+1];
        double[] sum = new double[A.length+1];
        for (int i=1; i<= A.length; i++) {
            sum[i] = sum[i-1] + A[i-1];
            dp[i][1] = sum[i] / (i);
        }
        
        for (int k=2; k<=K; k++) {
            for (int i=1; i<=A.length; i++) {
                dp[i][k] = Double.MIN_VALUE;
                for (int j=1; j<i; j++) {
                    dp[i][k] = Math.max(dp[j][k-1]+(sum[i]-sum[j])/(i-j), dp[i][k]);
                }
            }
        }
        return dp[A.length][K];
    }
}
