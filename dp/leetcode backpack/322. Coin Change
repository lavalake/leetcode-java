Coin Change
https://leetcode.com/problems/coin-change/description/
You are given coins of different denominations and a total amount of money amount. Write a function to compute the 
fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any
combination of the coins, return -1.

Example 1:

Input: coins = [1, 2, 5], amount = 11
Output: 3 
Explanation: 11 = 5 + 5 + 1

this problem is not an typical backpack problem.
For backpack problem, we need the maximum value for target space.
For this, we need minimum number for the target space.
So we init every sum to MAX at first. if it's not MAX, we set it to the count of coins to reach this sum.
If it's not MAX, we know we can get this amount. 
/*
spcial case
[2] 3
can not make change.
when calculate dp[3] we need dp[1]. but dp[1] is invalid. 
so we need check whether dp[1] is valid first
*/
class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;
        for (int i=0; i<coins.length; i++) {
            for (int j=coins[i]; j<=amount; j++) {
                //need to check dp[j-coins[i]] is valid or not
                dp[j] = dp[j-coins[i]]==Integer.MAX_VALUE?dp[j]:Math.min(dp[j], dp[j-coins[i]]+1);
            }
        }
        return dp[amount]==Integer.MAX_VALUE?-1:dp[amount];
    }
}

518. Coin Change 2
You are given coins of different denominations and a total amount of money. Write a function to compute the number of 
combinations that make up that amount. You may assume that you have infinite number of each kind of coin.

Note: You can assume that

0 <= amount <= 5000
1 <= coin <= 5000
the number of coins is less than 500
the answer is guaranteed to fit into signed 32-bit integer
 

Example 1:

Input: amount = 5, coins = [1, 2, 5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1
/*
this is knacksack problem.
because coins sequence does not matter
1112 and 2111 are same. 
So amount loop should be inner loop
1. can not reuse
    for coins 0 - num
        for amount v - 0
2. can reuse but sequence does not matter
    for coins 0 - num
        for amount 0 - v
3. can resue and sequence matters
    for amount 0 - v
        for coins 0 - num
*/
class Solution {
    public int change(int amount, int[] coins) {
        int[] dp = new int[amount+1];
        dp[0] = 1;
        for (int i = 0; i< coins.length; i++) {
            for (int j=coins[i]; j<=amount; j++) {
                
                    dp[j] += dp[j-coins[i]];
            }
        }
        return dp[amount];
    }
}

if sequence matters
1,2 and 2,1
then amount should put in outer loop
