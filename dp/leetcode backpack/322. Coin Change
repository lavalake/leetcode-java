Coin Change
https://leetcode.com/problems/coin-change/description/
You are given coins of different denominations and a total amount of money amount. Write a function to compute the 
fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any
combination of the coins, return -1.

Example 1:

Input: coins = [1, 2, 5], amount = 11
Output: 3 
Explanation: 11 = 5 + 5 + 1

this problem is not an typical backpack problem.
For backpack problem, we need the maximum value for target space.
For this, we need minimum number for the target space.
So we init every sum to MAX at first. if it's not MAX, we set it to the count of coins to reach this sum.
If it's not MAX, we know we can get this amount. 
class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] cnt = new int[amount+1];
        int[] sum = new int[amount+1];
        for (int i=1; i<=amount; i++)
            sum[i] = Integer.MAX_VALUE;
        for (int i=1; i<=amount; i++) {
            for (int j=0; j<coins.length; j++) {
                if (i >= coins[j])
                    sum[i] = sum[i-coins[j]]!=Integer.MAX_VALUE?Math.min(sum[i], sum[i-coins[j]]+1):sum[i];
            }
        }
        return sum[amount]==Integer.MAX_VALUE?-1:sum[amount];
    }
}
