286. Walls and Gates

class Solution {
    public void wallsAndGates(int[][] rooms) {
        for (int i=0; i<rooms.length; i++) {
            for (int j=0; j<rooms[0].length; j++) {
                if (rooms[i][j] == 0) {
                    dfs(rooms, i, j);
                }
            }
        }
    }
    private void dfs(int[][] rooms, int i, int j) {
        if (i<0 || i>=rooms.length || j<0 || j>=rooms[0].length) return;
        //if (rooms[i][j] == -1 ) return;
        if (i>0 && rooms[i-1][j] > (rooms[i][j]+1)) {
            rooms[i-1][j] = rooms[i][j]+1;
            dfs(rooms, i-1, j);
        }
        if (i<rooms.length-1 && rooms[i+1][j] > (rooms[i][j]+1)) {
            rooms[i+1][j] = rooms[i][j]+1;
            dfs(rooms, i+1, j);
        }
        if (j>0 && rooms[i][j-1] > (rooms[i][j]+1)) {
            rooms[i][j-1] = rooms[i][j]+1;
            dfs(rooms, i, j-1);
        }
        if(j<rooms[0].length-1 && rooms[i][j+1] > (rooms[i][j]+1)) {
            rooms[i][j+1] = rooms[i][j]+1;
            dfs(rooms, i, j+1);
        }
    }
}
