https://leetcode.com/problems/lonely-pixel-i/discuss/100096/Java-C++-Clean-Code-with-explanation
/**
 * suppose matrix is m*n, there is at most min(m, n) lonely pixels, because there could be no more than 1 in each row, or column;
 * therefore, if we record num of black pixel on each row and column, we can easily tell whether each pixel is lonely or NO.
 *     _0_1_2_
 *  0 | 0 0 1   rows[0] = 1
 *  1 | 0 1 0   rows[1] = 1
 *  2 | 1 0 0   rows[2] = 1
 * 
 * cols[0][1][2]
 *     1  1  1
 */
 class Solution {
    
    public int findLonelyPixel(char[][] picture) {
        int ret = 0;
        if (picture.length == 0 || picture[0].length == 0) return ret;
        int[] row = new int[picture.length];
        int[] col = new int[picture[0].length];
        for (int i=0; i<picture.length; i++) {
            for (int j=0; j<picture[0].length; j++) {
                if (picture[i][j] == 'B') {
                    row[i]++;
                    col[j]++;
                }
            }
        }
        for (int i=0; i<picture.length; i++) {
            for (int j=0; j<picture[0].length; j++) {
                if (picture[i][j] == 'B' && row[i] == 1 && col[j] == 1) ret++;
            }
        }
        return ret;
    }
}
