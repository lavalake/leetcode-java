304 Rang sum query 2D - immutable
key points
range (row1, col1) (row2, col2) = sum[row2][col2] - sum[row1-1][col2] - sum[row2][col1-1] + sum[row1-1][col1-1]
corner cases:
row1 = 0
col1 = 0
when calculate the presum of matrix
sumMatrix[i][j] = sumMatrix[i-1][j] + sumMatrix[i][j-1] - sumMatrix[i-1][j-1] + matrix[i][j];

class NumMatrix {
    int[][] sumMatrix;
    public NumMatrix(int[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) return;
        sumMatrix = new int[matrix.length][matrix[0].length];
        
        sumMatrix[0][0] = matrix[0][0];
        for (int i=1; i<matrix[0].length; i++) {
            sumMatrix[0][i] = sumMatrix[0][i-1] + matrix[0][i];
            
        }
        for (int i=1; i<matrix.length; i++) {
            sumMatrix[i][0] = sumMatrix[i-1][0] + matrix[i][0];
        }
        
        for (int i=1; i<matrix.length; i++) {
            for (int j=1; j<matrix[0].length; j++) {
            //remember to add matrix[i][j]
                sumMatrix[i][j] = sumMatrix[i-1][j] + sumMatrix[i][j-1] - sumMatrix[i-1][j-1] + matrix[i][j];
            }
        }
    }
    
    public int sumRegion(int row1, int col1, int row2, int col2) {
        if (sumMatrix == null) return 0;
        int sum = sumMatrix[row2][col2];
        if (row1 > 0) {
            sum -= sumMatrix[row1-1][col2];
            
        }
        if (col1 > 0) {
            sum -= sumMatrix[row2][col1-1];
        }
        
        if (row1>0 && col1>0) {
            sum += sumMatrix[row1-1][col1-1];
        }
        return sum;
    }
}
