https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/description/
Return the length of the shortest, non-empty, contiguous subarray of A with sum at least K.

If there is no non-empty subarray with sum at least K, return -1.

 

Example 1:

Input: A = [1], K = 1
Output: 1
Example 2:

Input: A = [1,2], K = 4
Output: -1
Example 3:

Input: A = [2,-1,2], K = 3
Output: 3
https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/discuss/204290/Monotonic-Queue-Summary
Return the length of the shortest, non-empty, contiguous subarray of A with sum at least K.

Key observation: If we accumulate array A to obtain B, then B[l] <= B[r] - K indicates sum(A[l:r]) >= K. Given B[r], 
the problem is equivalent to finding the nearest previous element B[l] such that B[l] <= B[r] - K.

We maintain a increasing queue here because, given a new B[i], the larger element on the left are inferior than B[i] 
as a candidate to make some future element B[j] >= B[i] + K (j > i).

One extra optimization learnt from @lee215 is that we can also pop up the element on the left side <= B[i] - K 
of the increasing queue because, given current element B[i], if a future element B[j] > B[i], then B[j] - K would be 
within the queue after the removal of such elements <= B[i] - K; Otherwise, if a future element B[j] > B[i] then it 
never appears in the final results.

/*
if useing sliding window, when meet larger than K, move to left
1 2 -3 5   K=5
1 2 -3 5 is a sequence. when we move one left, 2 -3 5 less than 5, so we will miss 5
so sliding window does not work
*/
class Solution {
    public int shortestSubarray(int[] A, int K) {
        int[] B = new int[A.length+1];
        for (int i=1; i<=A.length; i++) {
            B[i] = B[i-1] + A[i-1];
        }
        int shortest = Integer.MAX_VALUE;
        Deque<Integer> queue = new ArrayDeque<>();
        queue.offer(0);
        for (int i=1; i<B.length; i++) {
            while (!queue.isEmpty() && B[i] - B[queue.getFirst()]>=K) {
                shortest = Math.min(shortest, i-queue.getFirst());
                queue.poll();
            }
            //remember, queue store index, not value. !!!!use B[queue.getLast()]!!!!!
            while (!queue.isEmpty() && B[i] < B[queue.getLast()]) queue.pollLast();
            queue.offer(i);
        }
        return shortest==Integer.MAX_VALUE?-1:shortest;
    }
}
