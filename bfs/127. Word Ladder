Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is not a transformed word.
Note:

Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
Example 1:

Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

Output: 5

Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.
/*
use a visited set to recored the string we already processed, otherwise, will have cycles
or remove the string from dic after added to queue
hit hot dot lot
hit hot lot dot
this is a cycle
*/
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Queue<String> queue = new LinkedList<>();
        queue.add(beginWord);
        int res = 0;
        Set<String> dic = new HashSet<>();
        //Set<String> visited = new HashSet<>();
        //visited.add(beginWord);
        dic.addAll(wordList);
        if (!dic.contains(endWord)) return 0;
        int len = 1;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i=0; i<size; i++) {
                char[] temp = queue.poll().toCharArray();
                for (int j=0; j<temp.length; j++) {
                    char c = temp[j];
                    for (char k='a'; k<= 'z'; k++) {
                        if (c == k) continue;
                        temp[j] = k;
                        String newAttemp = new String(temp);
                        if (newAttemp.equals(endWord)) return len+1;
                        //if (dic.contains(newAttemp) && !visited.contains(newAttemp)) {
                        if (dic.contains(newAttemp)){
                            //visited.add(newAttemp);
                            queue.offer(newAttemp);
                            dic.remove(newAttemp);
                        }
                    }
                    temp[j] = c;
                }
                
            }
            len++;
        }
        return 0;
    }
    
    126. Word Ladder II
    
/*
bfs to find the len of the path
dfs to generate all the path
*/

class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        Set<String> dic = new HashSet<>();
        List<List<String>> res = new ArrayList<>();

        dic.addAll(wordList);
        if (!dic.contains(endWord)) return res; 
        List<String> path = new ArrayList<String>();
        Map<String, Set<String>> mem = new HashMap<>();
        Map<String, Integer> steps = new HashMap<>();
        bfs(beginWord, endWord, mem, dic, steps);
        path.add(beginWord);
        dfs(beginWord, endWord, mem, path, res);
        return res;
    }
    private int bfs(String begin, String end, Map<String, Set<String>> mem, Set<String> dic,Map<String, Integer> steps) {
        Queue<String> queue = new LinkedList<>();
        queue.offer(begin);
        boolean found = false;
        int len = 0;
        steps.put(begin, 0);
        while (!found && !queue.isEmpty()) {
            int size = queue.size();
            for (int i=0; i<size; i++) {
                String next = queue.poll();
                mem.putIfAbsent(next, new HashSet<String>());

                StringBuilder temp = new StringBuilder(next);
                for (int j=0; j<temp.length(); j++) {
                    char c = temp.charAt(j);
                    for (char k='a'; k<='z'; k++) {
                        if (c != k) {
                            temp.setCharAt(j, k);
                            if (temp.toString().equals(end)){
                                found = true;
                            } 
                            if (dic.contains(temp.toString())){
                                if (!steps.containsKey(temp.toString())) {
                                    queue.offer(temp.toString());
                                    steps.put(temp.toString(), len+1);
                                } else if (steps.get(temp.toString()) < len+1) {
                                    continue;
                                }
                                mem.get(next).add(temp.toString());
                                
                            }
                            temp.setCharAt(j, c);
                        }
                    }
                }
            }
            len++;
        }
        return len;
    }
    private void dfs(String start, String end, Map<String, Set<String>> mem, List<String> path, List<List<String>> res) {
        
    
        if (start.equals(end)) {
            res.add(new ArrayList<>(path));
            return;
        }

        if (mem.containsKey(start)) {
            for (String str : mem.get(start)) {
                path.add(str);
                dfs(str, end, mem, path, res);
                path.remove(path.size()-1);
            }
        }
        

    }
}
}
