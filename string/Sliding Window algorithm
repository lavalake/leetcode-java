https://leetcode.com/problems/find-all-anagrams-in-a-string/discuss/92007/Sliding-Window-algorithm-template-to-solve-all-the-Leetcode-substring-search-problem.
The algrithm is :
1. calculate characters in P, and put into frequency array, init count is p.length()
2. go through s one by one, and minus frequency of every character
3. if frequency[c] is large of equal 0, that means this is a target character in p. we need minus count which means we found a match character

5. when we move the window, we need update frequency and cnt
6. when cnt == 0, that means we found a match for whole string.

438. Find All Anagrams in a String
/*note, there could be duplicate characters in p. So can not use Set. Must use Map*/
/*note, there could be duplicate characters in p. So can not use Set. Must use Map*/
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> ret = new ArrayList<>();
        if (s.length() == 0 || p.length() == 0) return ret;
        if (s.length() < p.length()) return ret;
        //note, frequency should be int[] not char[]
        int[] frequency = new int[26];
        int cnt = 0;
        for (int i=0; i<p.length(); i++) {
            frequency[p.charAt(i)-'a']++;
            cnt++;
        }
        
        
        
        
        for (int i=0; i<s.length(); i++) {
            char cur = s.charAt(i);
            int index = cur - 'a';
            frequency[index]--;
            
            if (frequency[index] >= 0) cnt--;
            if (cnt == 0) ret.add(i-p.length()+1);
            if (i >= (p.length()-1)) {
                int start = i - p.length() + 1;
                if (frequency[s.charAt(start)-'a'] >= 0) cnt++;
                frequency[s.charAt(start)-'a']++;
            }
        }
        return ret;
    }
}

76. Minimum Window Substring
1. calculate freq of t
2. pass s, minus one for every character in freq
3. if freq[c] >= 0, means we found one matching character, count--
4. if count == 0, means we found a whole matching substring

5. //remember to move the start pointer to first character in t.
//the first freq[c] == 0 means we found the start
//because all the character not in t, the freq[c] < 0
//all the character in t but accure more then freq in t will < 0. We need igore this

https://leetcode.com/problems/minimum-window-substring/
class Solution {
    public static final char BASE = 'A';
    public String minWindow(String s, String t) {
        if (s.length() < t.length() || s.length() == 0 || t.length() == 0) return "";
        int count = t.length();
        int start = 0, end = 0;
        int left = 0, right = 0;
        int minLen = Integer.MAX_VALUE;
        int[] freq = new int[256];
        for (char c : t.toCharArray()) {
            freq[c-BASE]++;
        }
        while (end < s.length()) {
            char cur = s.charAt(end);
            freq[cur-BASE]--;
            if (freq[cur-BASE] >= 0) count--;
            if (count == 0) {
               //remember to move the start pointer to first character in t.
                //the first freq[c] == 0 means we found the start
                //because all the character not in t, the freq[c] < 0
                //all the character in t but accure more then freq in t will < 0. We need igore this
                while (freq[s.charAt(start)-BASE] < 0) {
                    
                    freq[s.charAt(start++)-BASE]++;
                }
                
                if (minLen > (end - start + 1)) {
                    minLen = (end - start + 1);
                    left = start;
                    right = end;
                }
                
                count++;
                freq[s.charAt(start++)-BASE]++;
                
            }
            end++;
            
        }
        return minLen == Integer.MAX_VALUE?"":s.substring(left, right+1);
    }
}

3. Longest Substring Without Repeating Characters

https://leetcode.com/problems/longest-substring-without-repeating-characters/
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s.length() == 0) return 0;
        Map<Character, Integer> indexMap = new HashMap<>();
        int maxLen = 1, start = 0;
        
        for (int i=0; i<s.length(); i++) {
            char cur = s.charAt(i);
            if (indexMap.containsKey(cur) && indexMap.get(cur) >= start) {
                maxLen = Math.max(maxLen, i - start);
                start = indexMap.get(cur) + 1;
            }
            indexMap.put(cur, i);
            
        }
        maxLen = Math.max(maxLen, s.length() - start);
        return maxLen;
    }
}


https://leetcode.com/problems/substring-with-concatenation-of-all-words/
https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/
https://leetcode.com/problems/find-all-anagrams-in-a-string/
