1. calculate all index of character in t and store in map
2. loop character in s, if the char is in t, then try to find a index in map that is larger then prev index.

class Solution {
    public boolean isSubsequence(String s, String t) {
        Map<Character, List<Integer>> map = new HashMap<>();
        for (int i=0; i<t.length(); i++) {
            char c = t.charAt(i);
            if (!map.containsKey(c)) {
                map.put(c, new ArrayList<Integer>());
            }
            map.get(c).add(i);
        }
        int pre = -1; //index of pre character
        for (int i=0; i<s.length(); i++) {
            char c = s.charAt(i);
            if (!map.containsKey(c)) return false;
            pre = binarySearch(map.get(c), pre);
            if (pre== -1) return false;
        }
        return true;
    }
    //find next larger index in list than pre, if no, return -1
    private int binarySearch(List<Integer> list, int pre) {
        int left = 0, right = list.size() -1 ;
        while (left <= right) {
            int mid = left + (right - left)/2;
            if (list.get(mid) > pre) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return (left == list.size())?-1:list.get(left);
    }
}
