227 basic calculatorII
calculate all * and / operation first and push back to stack
then stack only have add operation. because for '-' operation, we can push -num

1. push the numbers to stack
2. if meet operator, remember it. because we need to use it for the next number
3. if previous is '*' or '/', then pop the top number, calculate the result and push back
4. if previous is '-', push -num to stack
5. after the iteration, the stack only have '+' operation. then sum all numbers in stack
6. be careful for the space

class Solution {
    public int calculate(String s) {
        Integer ret = 0;
        //if (s.length() < 3) return ret;
        Deque<Integer> operandStack = new LinkedList<>();
        int i = 0;
        char preOperator = '+';
        while (i < s.length()) {
            char cur = s.charAt(i);
            int curNum = -1;
            if (cur == ' ') {
                i++;
                continue;
            }
            if (Character.isDigit(cur)) {
                int endIndex = findOperator(s, i);
                curNum = Integer.valueOf(s.substring(i,endIndex));
                
                i = endIndex;
                
                if (preOperator == '*' || preOperator == '/') {
                    int op1 = operandStack.pop();
                    if (preOperator == '*') curNum = op1*curNum;
                    else curNum = op1/curNum;
                } else if (preOperator == '-') {
                    curNum = (-curNum);
                } 
                operandStack.push(curNum);
            } else {
                
                preOperator = cur;
                i++;
            }
            
        }
        //now only '+' operation left. so sum all numbers in stack
        Iterator<Integer> itr = operandStack.iterator();
        while (itr.hasNext()) {
            ret += itr.next();
        }
        return ret;
    }
    private int findOperator(String s, int index) {
        while (index < s.length()) {
            if (!Character.isDigit(s.charAt(index))) return index;
            index++;
        }
        return index;
    }
}



224 Basic Calculator
1. we calculate the sum until we meat a (
2. push the sign of current () and current sum to stack
3. reset sign and sum
4. calculate until reach a ), that means we finish calculation of a ()
5. sum*sign then pop the sum stack and the sign stack. to restore the calculation before (
Special case
(1-(1+2))+(2-3)
1+(5)

class Solution {
    public int calculate(String s) {
        int sign = 1, curSign = 1;
        int ret = 0, sum = 0;
        Deque<Integer> stack = new LinkedList<>();
        Deque<Integer> factorStack = new LinkedList<>();
        int index = 0;
        while (index < s.length()) {
            char cur = s.charAt(index);
            switch (cur) {
                case '(' :
                    //whenever meet (, reset sum and sign and curSign
                    stack.push(sum);
                    factorStack.push(sign);
                    sign = curSign;
                    sum = 0;
                    curSign = 1;
                    break;
                case ')' :
                sum *= sign;
                sum += stack.pop();
                sign = factorStack.pop();
                    break;
                case '+' :
                    curSign = 1;
                    break;
                case '-' :
                    curSign = -1;
                    break;
                case ' ':
                    break;
                default :
                    int endIndex = findNum(s, index);
                    sum += curSign * Integer.valueOf(s.substring(index, endIndex));
                    index = endIndex - 1;
                    break;
            }
            index++;
            
        }
        return sum;
    }
    private int findNum(String s, int i) {
        while (i < s.length() && Character.isDigit(s.charAt(i))) {
            i++;
        }
        return i;
    }
}
