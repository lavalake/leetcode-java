247. Strobogrammatic Number II


//special case 00
//00 can only be added except head and tail. so we need to pass the length down
//we need to check in the recersion whether now we are at the outer most layer
class Solution {
    String[][] map = new String[][] {{"0","0"}, {"1", "1"}, {"8", "8"}, {"9", "6"}, {"6", "9"}};
    public List<String> findStrobogrammatic(int n) {
        List<String> res = new ArrayList<>();
        return helper(n, n);
    }
    private List<String> helper(int n, int m) {
        List<String> res = new ArrayList<>();
        if (n == 0) {
            return Arrays.asList("");
        } 
        if (n == 1) {
            return Arrays.asList("0", "1", "8");
        }
        List<String> temp = helper(n-2, m);
        for (String str : temp) {
            for (int i=0; i<map.length; i++) {
                if (n == m && i == 0) continue;
                res.add(map[i][0] + str + map[i][1]);
            }
        }
        return res;
    }
}


class Solution {
    
    public List<String> findStrobogrammatic(int n) {
        char[][] map = new char[][] {{'0','0'}, {'1','1'}, {'8','8'}, {'6','9'}, {'9','6'}};
        List<String> res = new ArrayList<>();
        char[] target = new char[n];
        dfs(map, target, 0, n-1, res);
        return res;
    }
    private void dfs(char[][] map, char[] target, int left, int right, List<String> res) {
        if (left > right) {
            res.add(new String(target));
            return;
        }
        for (int j=0; j<map.length; j++) {
            
            char cl, cr;
            char charLeft = target[left], charRight = target[right];
            if (left==right) {
                if (map[j][0]==map[j][1]) {
                   cl = map[j][0];
                    cr = target[right]; 
                } else {
                    continue;
                }
                
            } else if(left == 0 && map[j][0] == '0') {
                continue;
            } else {
                cl = map[j][0];
                cr = map[j][1];
            }
            
            target[right] = cr;
            target[left] = cl;
            
            dfs(map, target, left+1,right-1, res);
            target[left] = charLeft;
            target[right] = charRight;
        }
    }
}
