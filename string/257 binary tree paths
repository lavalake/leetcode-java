
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> path = new ArrayList<>();
        if (root == null) return path;
        findPaths(root, path, new StringBuilder());
        return path;
    }
    private void findPaths(TreeNode root, List<String> path, StringBuilder sb) {
        String newNode;
        if (sb.length() == 0) {
            newNode = new String(String.valueOf(root.val));
        } else {
            newNode = new String("->"+String.valueOf(root.val));
        }
        sb.append(newNode);
        if (root.left == null && root.right == null) {
            path.add(sb.toString());
            sb.setLength(sb.length()-newNode.length());
            return;
        }
        if (root.left != null)
            findPaths(root.left, path, sb);
        if (root.right != null)
            findPaths(root.right, path, sb);
        sb.setLength(sb.length()-newNode.length());
    }
}
