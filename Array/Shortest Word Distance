243. Shortest Word Distance
Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list.
word1 not equals word2
class Solution {
    public int shortestDistance(String[] words, String word1, String word2) {
        int p1=-1, p2=-1, res=Integer.MAX_VALUE;
        for (int i=0; i<words.length; i++) {
            if (words[i].equals(word1)) {
                p1 = i;
                if (p2 != -1) {
                    res = Math.min(res, (p1-p2));
                }
            }
            if (words[i].equals(word2)) {
                p2 = i;
                if (p1 != -1) {
                    res = Math.min(res, (p2-p1));
                }
            }
        }
        return res;
    }
}

244. Shortest Word Distance II
Design a class which receives a list of words in the constructor, and implements a method that takes two words word1 
and word2 and return the shortest distance between these two words in the list. Your method will be called repeatedly 
many times with different parameters. 
class WordDistance {
    private Map<String, List<Integer>> map;
    public WordDistance(String[] words) {
        map = new HashMap<>();
        for(int i=0; i<words.length; i++) {
            if(map.containsKey(words[i])) {
                map.get(words[i]).add(i);
            } else {
                List<Integer> list = new ArrayList<>();
                list.add(i);
                map.put(words[i], list);
            }
        }
    }
    
    public int shortest(String word1, String word2) {
        List<Integer> l1 = map.get(word1);
        List<Integer> l2 = map.get(word2);
        int r1=0, r2=0;
        int v1 = -1, v2 = -1;
        int res = Integer.MAX_VALUE;
        //Note, use && because if any one end, the min distance has get
        while (r1<l1.size() && r2<l2.size()) {
            
                v1 = l1.get(r1);
            
                v2 = l2.get(r2);
            if (v1<v2) {
                res = Math.min(res, (v2-v1));
                r1++;
            } else {
                res = Math.min(res, (v1-v2));
                r2++;
            }
            
        }
        return res;
    }
}

245. Shortest Word Distance III
word1 and word2 maybe equal. So based on I, need to consider special case
public class Solution {
    public int shortestWordDistance(String[] words, String word1, String word2) {
        int ret = Integer.MAX_VALUE;
        
        int index1 = -1;
        int index2 = -1;
        for(int i=0; i<words.length; i++) {
            if(words[i].equals(word1) && words[i].equals(word2)) {
                if(index1 != -1) {
                    ret = Math.min(ret, i-index1);
                }
                
                index1 = i;
            } else if(words[i].equals(word1)) {
                if(index2 != -1) {
                    ret = Math.min(ret, i-index2);
                }
                index1 = i;
            } else if(words[i].equals(word2)) {
                if(index1 != -1) {
                    ret = Math.min(ret, i-index1);
                }
                index2 = i;
            }
        }
        
        return ret;
    }
}

