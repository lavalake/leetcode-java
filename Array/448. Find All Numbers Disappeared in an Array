448. Find All Numbers Disappeared in an Array
Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.



easiest way is add all number to a set. 
for i = 1 - n
  if (!set.contains(i)) add to ret

if space requirement is O(1), then we can use a trick
此题关键信息是所有number是在1 到数组长度范围内。次信息非常重要。这样我们可以用每个数作为数组下标，对数组元素取反。
这样，所有大于0的数，对应的index就是在数组中不存在的数。

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> ret = new ArrayList<>();
        for (int i=0; i<nums.length; i++) {
            if (nums[i] > 0) {
                if (nums[nums[i]-1] > 0)
                nums[nums[i]-1] *= -1;
            } else {
                if (nums[-nums[i]-1] > 0)
                nums[-nums[i]-1] *= -1;
            }
        }
        for (int i=0; i<nums.length; i++) {
            if (nums[i] > 0) ret.add(i+1);
        }
        return ret;
    }
}
