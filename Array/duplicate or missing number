287. Find the Duplicate Number
这道题给了我们n+1个数，所有的数都在[1, n]区域内，首先让我们证明必定会有一个重复数，这不禁让我想起了小学华罗庚奥数中的抽屉原理
(又叫鸽巢原理), 即如果有十个苹果放到九个抽屉里，如果苹果全在抽屉里，则至少有一个抽屉里有两个苹果，这里就不证明了，直接来做题吧。
题目要求我们不能改变原数组，即不能给原数组排序，又不能用多余空间，那么哈希表神马的也就不用考虑了，又说时间小于O(n2)，也就不能用
brute force的方法，那我们也就只能考虑用二分搜索法了，我们在区别[1, n]中搜索，首先求出中点mid，然后遍历整个数组，统计所有小于等
于mid的数的个数，如果个数大于mid，则说明重复值在[mid+1, n]之间，反之，重复值应在[1, mid-1]之间，然后依次类推，直到搜索完成，
此时的low就是我们要求的重复值

136. Single Number
XOR all numbers

137. Single Number II
这道题是之前那道 Single Number 单独的数字 的延伸，那道题的解法就比较独特，是利用计算机按位储存数字的特性来做的，这道题就是除了一个单独的数字之外，数组中其他的数字都出现了三次，那么还是要利用位操作 Bit Operation 来解此题。我们可以建立一个32位的数字，来统计每一位上1出现的个数，我们知道如果某一位上为1的话，那么如果该整数出现了三次，对3去余为0，我们把每个数的对应位都加起来对3取余，最终剩下来的那个数就是单独的数字*/
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ret=0;
        for (int i=0; i<32; i++) {
            int sum=0;
            for (int j=0; j<nums.size(); j++) {
                sum += (nums[j] >> i) & 1;
            }
            if (sum%3 != 0) {
                ret |= 1 << i;
            }
        }
        return ret;
    }
};

260. Single Number III
bit man
right most bit = num & -num
/*http://www.cnblogs.com/grandyang/p/4741122.html
这道题是之前那两道Single Number 单独的数字和 Single Number II 单独的数字之二的再次延伸，说实话，这类位操作Bit Manipulation的题，
如果之前没有遇到过类似的题目，楞想是很难相出来的，于是我只能上网搜大神们的解法，发现还真是巧妙啊。这道题其实是很巧妙的利用了Single
Number 单独的数字的解法，因为那道解法是可以准确的找出只出现了一次的数字，但前提是其他数字必须出现两次才行。而这题有两个数字都只
出现了一次，那么我们如果能想办法把原数组分为两个小数组，不相同的两个数字分别在两个小数组中，这样分别调用Single Number 单独的数字
的解法就可以得到答案。那么如何实现呢，首先我们先把原数组全部异或起来，那么我们会得到一个数字，这个数字是两个不相同的数字异或的结果，
我们取出其中任意一位为‘1’的位，为了方便起见，我们用 a &= -a 来取出最右端为‘1’的位，然后和原数组中的数字挨个相与，那么我们要求的两
个不同的数字就被分到了两个小组中，分别将两个小组中的数字都异或起来*/
class Solution {
    public int[] singleNumber(int[] nums) {
        int xor = 0;
        int[] ret = new int[2];
        for (int i : nums) {
            xor ^= i;
        }
        int rmb = xor & (-xor);
        ret[0] = xor;
        for (int i : nums) {
            if ((i & rmb) != 0) {
                ret[0] ^= i;
            }
        }
        ret[1] = ret[0] ^ xor;
        return ret;
    }
}

268. Missing Number
sum(arr) - sum(n)
public class Solution {
    public int missingNumber(int[] nums) {
        if(nums.length == 0) return 0;
        
        int totalSum = 0;
        int actualSum = 0;
        for(int i=0; i<nums.length; i++) {
            actualSum += nums[i];
            totalSum += (i+1);
        }
        
        return totalSum - actualSum;
    }
}

下面两题有相似的条件，数组元素都小于数组的长度
1《＝a[i] <= n
对于这一类型的题目，可以考虑数组值对应的下标之间建立联系。将对应下标位置的值取反表示数值存在

448. Find All Numbers Disappeared in an Array
Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements of [1, n] inclusive that do not appear in this array.
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> ret = new ArrayList<>();
        for (int i=0; i<nums.length; i++) {
            int index = nums[i] > 0?nums[i] : -nums[i];
            if (nums[index-1] > 0) {
                    nums[index-1] *= -1;
            } 
        }
        for (int i=0; i<nums.length; i++) {
            if (nums[i] > 0) ret.add(i+1);
        }
        return ret;
    }
}


442. Find All Duplicates in an Array
Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements that appear twice in this array.


Could you do it without extra space and in O(n) runtime?
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> ret = new ArrayList<>();
        for (int i=0; i<nums.length; i++) {
            int index = nums[i] > 0?nums[i] : -nums[i];
            if (nums[index-1] > 0)
                nums[index-1] *= -1;
            else
                ret.add(index);
        }
        
        return ret;
    }
}
