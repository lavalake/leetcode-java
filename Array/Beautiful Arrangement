https://leetcode.com/problems/beautiful-arrangement-ii/discuss/106948/C++-Java-Clean-Code-4-liner
if you have n number, the maximum k can be n - 1;
if n is 9, max k is 8.
This can be done by picking numbers interleavingly from head and tail,

// start from i = 1, j = n;
// i++, j--, i++, j--, i++, j--

i: 1   2   3   4   5
j:   9   8   7   6
out: 1 9 2 8 3 7 4 6 5
dif:  8 7 6 5 4 3 2 1
Above is a case where k is exactly n - 1
When k is less than that, simply lay out the rest (i, j) in incremental
order(all diff is 1). Say if k is 5:

     i++ j-- i++ j--  i++ i++ i++ ...
out: 1   9   2   8    3   4   5   6   7
dif:   8   7   6   5    1   1   1   1 

class Solution {
    public int[] constructArray(int n, int k) {
        int[] res = new int[n];
        int s = 1, l = n;
        int i=0;
        for (; i<k; i++) {
            if (i%2==0) res[i] = s++;
            else {
                res[i] = l--;
            }
        }
        if (k%2==1) {
            while (i < n) res[i++] = s++;
        } else {
            while (i < n) res[i++] = l--;
        }
        return res;
    }
}


2. beautiful-arrangement I
https://leetcode.com/problems/beautiful-arrangement/discuss/99707/Java-Solution-Backtracking
Just try every possible number at each position...
for every position, we need start from begining. need a visited array to recored visited

public class Solution {
    int count = 0;
    
    public int countArrangement(int N) {
        if (N == 0) return 0;
        helper(N, 1, new int[N + 1]);
        return count;
    }
    
    private void helper(int N, int pos, int[] used) {
        if (pos > N) {
            count++;
            return;
        }
        
        for (int i = 1; i <= N; i++) {
            if (used[i] == 0 && (i % pos == 0 || pos % i == 0)) {
                used[i] = 1;
                helper(N, pos + 1, used);
                used[i] = 0;
            }
        }
    }
}
