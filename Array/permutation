31. Next Permutation
/*
find next larger sequence than current one.
checking from back to front. if it's increasing, then it's already largest one, continue
until we found a decreasing one, then we need find the least larger one then current in the increasing sequence
then swap the least larger one with current and then reverse the increasing sequence

1 3 2
3 2 are increasing, we need find the smallest larger one in 3 2 and it's 2
swap 1 and 2
then reverse 3 1
*/
class Solution {
    public void nextPermutation(int[] nums) {
        int i = nums.length-1;
        for (; i> 0; i--) {
            if (nums[i] <= nums[i-1]) continue;
            int index = find(nums, nums[i-1], i, nums.length-1);
            swap(nums, i-1, index);
            reverse(nums, i, nums.length-1);
            break;
        }
        if (i == 0) reverse(nums, 0, nums.length-1);
    }
    private int find(int[] nums, int n, int left, int right) {
        while (left <= right) {
            int mid = (left+right)/2;
            if (nums[mid] <= n) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return right;
    }
    private void reverse(int[] nums, int i, int j) {
        while (i < j) {
            swap(nums, i++, j--);
        }
    }
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
