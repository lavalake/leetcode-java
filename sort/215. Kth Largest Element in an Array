
special case
[1] 1
[3,3,3,3,3,3,3,3,3,] 1


/*
https://leetcode.com/problems/kth-largest-element-in-an-array/discuss/60294/Solution-explained
special case
[3,3,3,3,3,3,3,3,3] 1
[1] 1
use selection sort. use first nums as pivot
go throgh from two end
find first num > pivot from left
find first num <= pivot from right
swap
*/
class Solution {
    public int findKthLargest(int[] nums, int k) {
        int low = 0, high = nums.length - 1;
        k = nums.length - k;
        while (low < high) {
            final int pivot = partition(nums, low, high);
            if (pivot == k) {
                break;
            } else if (pivot > k) {
                high = pivot - 1;
            } else {
                low = pivot + 1;
            }
        }
        return nums[k];
    }
    private int partition(int[] nums, int low, int high) {
        int pivot = nums[low];
        int i = low+1, j = high;
        while (true) {
            //here, from left, need use nums[i] <= pivot. for special case [3,3,3,3,3,3,3]
            while (i <=j && (nums[i] <= pivot)) i++;
            //from right, need use nums[i] > pivot
            while (j >= i && (nums[j] > pivot)) j--;
            if (i >= j) break;
            swap(nums, i, j);
        }
        swap(nums,low, j);
        return j;
    }
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
