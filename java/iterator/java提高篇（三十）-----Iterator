https://www.cnblogs.com/chenssy/p/3821328.html
对于数组我们是使用下标来进行处理的:

int[] arrays = new int[10];   for(int i = 0 ; i < arrays.length ; i++){       int a = arrays[i];       //do something   }
对于ArrayList是这么处理的:

List<String> list = new ArrayList<String>();   for(int i = 0 ; i < list.size() ;  i++){      String string = list.get(i);      //do something   }
对于这两种方式，我们总是都事先知道集合的内部结构，访问代码和集合本身是紧密耦合的，无法将访问逻辑从集合类和客户端代码中分离出来。
同时每一种集合对应一种遍历方法，客户端代码无法复用。 在实际应用中如何需要将上面将两个集合进行整合是相当麻烦的。
所以为了解决以上问题，Iterator模式腾空出世，它总是用同一种逻辑来遍历集合。
使得客户端自身不需要来维护集合的内部结构，所有的内部状态都由Iterator来维护。
客户端从不直接和集合类打交道，它总是控制Iterator，向它发送"向前"，"向后"，"取当前元素"的命令，就可以间接遍历整个集合。
