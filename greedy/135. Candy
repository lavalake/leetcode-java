There are N children standing in a line. Each child is assigned a rating value.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
What is the minimum candies you must give?

Example 1:

Input: [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
Example 2:

Input: [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
             The third child gets 1 candy because it satisfies the above two conditions.
             
             
https://leetcode.com/problems/candy/discuss/42770/One-pass-constant-space-Java-solution
This solution picks each element from the input array only once. First, we give a candy to the first child. Then for each child we have three cases:

His/her rating is equal to the previous one -> give 1 candy.
His/her rating is greater than the previous one -> give him (previous + 1) candies.
His/her rating is less than the previous one -> don't know what to do yet, let's just count the number of such consequent cases.
When we enter 1 or 2 condition we can check our count from 3. If it's not zero then we know that we were descending before and we have everything to update our total candies amount: number of children in descending sequence of raitings - coundDown, number of candies given at peak - prev (we don't update prev when descending). Total number of candies for "descending" children can be found through arithmetic progression formula (1+2+...+countDown). Plus we need to update our peak child if his number of candies is less then or equal to countDown.
/*
special case
1 2 2
4
1 2 1
*/
class Solution {
    public int candy(int[] ratings) {
        int total = 1, peak = 1, descCount = 0;
        for (int i = 1; i<ratings.length; i++) {
            if (ratings[i] >= ratings[i-1]) {
                if (descCount != 0) {
                    total += descCount*(descCount+1)/2;
                    if (peak <= descCount) {
                        total += descCount - peak + 1;
                    }
                    descCount = 0;
                    peak = 1;
                }
                //here !!!if equal, we can reset the peak to 1
                peak = ratings[i] == ratings[i-1]?1:peak+1;
                total += peak;
                
            } else {
                descCount++;
            }
        }
        if (descCount != 0) {
            total += descCount*(descCount+1)/2;
            if (peak <= descCount) {
                total += descCount - peak + 1;
            }
        }
     return total;

    }
}
