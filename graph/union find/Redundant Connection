
https://leetcode.com/problems/redundant-connection/description/
class Solution {
        int[] parent;

    public int[] findRedundantConnection(int[][] edges) {
        parent = new int[edges.length];

        for (int i=0; i<parent.length; i++) {
            parent[i] = i;
        }
        
        for (int i=0; i<edges.length; i++) {
            if (find(edges[i][0]-1) == find(edges[i][1]-1)) return edges[i];
            union(edges[i][0]-1, edges[i][1]-1);
        }
        return new int[2];
    }
    private int find(int i) {
        if (parent[i] == i) return i;
        else return find(parent[i]);
    }
    
    /*not when union, need find parent of m and n. then assign one to the other*/
    private void union(int m, int n) {
        parent[find(m)] = find(n);
    }
}
