/*
stones.length is number of stone
we uinion row and col. in order to differentiate row and col, we use -(col+1)
special case
[0,1] [1,0]
row 0 and col 0 will conflict. so use -(col+1)
*/
class Solution {
    Map<Integer, Integer> parents;
    int islands;
    public int removeStones(int[][] stones) {
        parents = new HashMap<>();
        islands = 0;
        for (int[] s : stones) {
            //!!!!!!!!!col need +1 before ngetive because -0 is 0 and confilct with row 0!!!!!!!!
            union(s[0], -(s[1]+1));
        }
        return stones.length - islands;
    }
    private void union(int x, int y) {
        if (find(x) != find(y)) {
            parents.put(find(x),find(y));
            islands--;
        }
    }
    private int find(int n) {
        if (!parents.containsKey(n)) {
            parents.put(n,n);
            islands++;
        }
        if (parents.get(n) != n) return find(parents.get(n));
        else return n;
    }
}


https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/discuss/209369/Java-recursive-DFS-Short-and-easy-to-understand

Time : O(N^2), N = # of stones
Space: O(N)

class Solution {
    // Ans = # of stones â€“ # of islands
    public int removeStones(int[][] stones) {
        Set<int[]> visited = new HashSet();
        int numOfIslands = 0;
        for (int[] s1:stones){
            if (!visited.contains(s1)){
               dfs(s1, visited, stones); 
               numOfIslands++;
            }
        }
        return stones.length - numOfIslands;
    }
    
    private void dfs(int[] s1, Set<int[]> visited, int[][] stones){
        visited.add(s1);
        for (int[] s2: stones){
            if (!visited.contains(s2)){
				// stone with same row or column. group them into island
                if (s1[0] == s2[0] || s1[1] == s2[1])
                    dfs(s2, visited, stones);
            }
        }
    }
}
