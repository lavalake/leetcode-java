
https://leetcode.com/problems/alien-dictionary/discuss/199954/My-2ms-Java-Solution-Topology-Sorting
/*
topologycal sort
bfs or dfs
dfs:
1. use color to detect circle
    1: init
    2: visiting neighbor
    3: visited
https://www.geeksforgeeks.org/topological-sorting-indegree-based-solution/
1. need to consider circle
2. all remaining char which does not have any dependency
special
1. two equals string
wtr
wtr
rturn wtr
2. circle
wtr
wtf
wtr

wtr
etf
ftm
wab

3. other chars
wrt
e
output
wert
*/
class Solution {
    public String alienOrder(String[] words) {
        Map<Character, Set<Character>> graph = new HashMap<>();
        int[] color = new int[26];
        for (String word : words) {
            for (char c : word.toCharArray()) {
                color[c-'a'] = 1;
            }
        }
        for (int i=1; i<words.length; i++) {
            for (int j=0; j<Math.min(words[i].length(), words[i-1].length()); j++) {
                if (words[i].charAt(j) != words[i-1].charAt(j)) {
                    int from = i-1, to = i;
                    if (!graph.containsKey(words[from].charAt(j))) {
                        graph.put(words[from].charAt(j), new HashSet<Character>());
                    }
                    graph.get(words[from].charAt(j)).add(words[to].charAt(j));
                    //remeber to break if we found the edge
                    break;
                }
            }
        }
        Deque<Character> stack = new LinkedList<>();
        StringBuilder result = new StringBuilder();
        for (int i=0; i<26; i++) {
            
            if (color[i] == 1) {
                if (dfs(graph, (char)(i+'a'), stack, color)) return "";
            }
            
        }
        
        while (!stack.isEmpty()) {
            result.append(stack.pop());
        }
        
        return result.toString();
    }
    private boolean dfs(Map<Character, Set<Character>> graph, char index, Deque<Character> stack, int[] color) {
        
        if (color[index-'a'] == 3) return false;
        if (color[index-'a'] == 2) {
            return true;
        }
        if (graph.get(index) == null){
            stack.push(index);
            color[index-'a'] = 3;
            return false;
        } 
        color[index-'a'] = 2;
        
        for (char c : graph.get(index)) {
            if (dfs(graph, c, stack, color)) return true;
        }
        stack.push(index);
        color[index-'a'] = 3;
        return false;
    }
}
