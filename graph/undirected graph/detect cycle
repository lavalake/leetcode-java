check whether there is a back edge to same node.
For undirected graph, it's different with directed. For directed, you can only check whehter the node is visited or not
before.
But for undirected, for every edge, there are two item in the adjacent list. For example,
[0,1]
graph.get(0).add(1)
graph.get(1).add(0)
so this should not be considerd for cycle. So we need to pass the parent node to next recersive check.

https://www.geeksforgeeks.org/detect-cycle-undirected-graph/
The time complexity of the union-find algorithm is O(ELogV). Like directed graphs, we can use DFS to detect cycle in 
an undirected graph in O(V+E) time. We do a DFS traversal of the given graph. For every visited vertex ‘v’, if there is
an adjacent ‘u’ such that u is already visited and u is not parent of v, then there is a cycle in graph.

