https://leetcode.com/problems/keys-and-rooms/description/
this is a graph question. Use bfs. Create a queue and visit array. Remember to check whether it's visited. Otherwise there
will be dead circle
this is a directed graph
This is a special case for graph. becuase this problem require starting from room 0. So we do not need to loop all nodes
class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[rooms.size()];
        dfs(rooms, 0, visited);
        for (boolean v : visited) {
            if (!v) return false;
        }
        return true;
    }
    private void dfs(List<List<Integer>> rooms, int start, boolean[] visited) {
        if (visited[start]) return;
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(start);
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            visited[cur] = true;
            for (int i : rooms.get(cur)) {
                if (!visited[i])
                    queue.add(i);
            }
        }
    }
}
