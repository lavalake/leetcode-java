https://leetcode.com/problems/course-schedule/description/
this is a problem to detet cycle in directed graph

first solution, use recersion.
note for directed graph to cycle, we need to a color
 0 means not visited
 1 means visting
 2 means visited
 if we meet a color 1 in recursion, that means a circle


class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> matrix = new ArrayList<>();
        int[] color = new int[numCourses];
        for (int i=0; i<numCourses; i++) {
            matrix.add(new ArrayList<Integer>());
        }
        
        for (int[] e : prerequisites) {
            matrix.get(e[0]).add(e[1]);
        }
        for (int n=0; n<numCourses; n++) {
            if (color[n] == 0)
                if(isCyclic(matrix, n, color)) return false;
        }
        
        return true;
    }
    private boolean isCyclic(List<List<Integer>> matrix, int i, int[] color) {
        if (color[i] == 1) return true;
        if (color[i] == 2) return false;
        color[i] = 1;
        for (int m : matrix.get(i)) {
            if (isCyclic(matrix, m, color)) return true;
        }
        color[i] = 2;
        return false;
    }
}
