init condition
cur = head,
pre = null;
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode cur = head;
        ListNode pre = null;
        while (cur != null) {
            ListNode next = cur.next;
            cur.next = pre;
            pre = cur;
            cur = next;
        }
        return pre;
    }
}

92. Reverse Linked List II
if head may change, we need a dummy node to point to the head and return that node

class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        ListNode cur = head;
        ListNode dummy = new ListNode(-1);
        ListNode pre = dummy;
        pre.next = head;
        int i = 1;
        while (i < m && cur != null) {
            pre = cur;
            cur = cur.next;
            i++;
        }
        ListNode reversePre = cur;
        if (cur != null)
            cur = cur.next;
        while (i < n && cur != null) {
            ListNode next = cur.next;
            cur.next = reversePre;
            reversePre = cur;
            cur = next;
            i++;
        }
        pre.next.next = cur;
        pre.next = reversePre;
        return dummy.next;
    }
}
