https://leetcode.com/problems/insert-into-a-cyclic-sorted-list/description/
https://leetcode.com/problems/insert-into-a-cyclic-sorted-list/discuss/149374/Java-5ms-One-Pass-and-Two-Pass-Traverse-With-Detailed-Comments-and-Edge-cases!
Given a node from a cyclic linked list which is sorted in ascending order, write a function to insert a value into the list such that it remains a cyclic sorted list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the cyclic list.

If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the cyclic list should remain sorted.

If the list is empty (i.e., given node is null), you should create a new single cyclic list and return the reference to that single node. Otherwise, you should return the original given node.

The following example may help you understand the problem better:

 

/*
special case
null
single node 1
duplicates
3 3 4 1 insertval 3
all same
3 3 3 3 insertVal 3

3 4 1   insertVal 3
3 4 1   insertVal 4
divide the list into two segments
1. increasing
2. turning point
*/
class Solution {
    public Node insert(Node head, int insertVal) {
        if (head == null) {
            
            head = new Node(insertVal);
            head.next = head; 
            return head;
        }
        Node runner = head.next;

        if (runner == head) {
            head.next = new Node(insertVal);
            head.next.next = head;
            return head;
        }
        while (runner != head) {
            //this will cover 
            //duplicate insertVal case 3 4 1 insertVal 3 or 4
            if (runner.val <= runner.next.val && insertVal >= runner.val && insertVal <= runner.next.val) {
                insertNodeAfter(runner, insertVal);
                break;
            } else if (runner.val > runner.next.val && (insertVal > runner.val || insertVal < runner.next.val)) {
                insertNodeAfter(runner, insertVal);
                break;
            }
            runner = runner.next;
        }
        //this will cover all same case
        //if we reach here, no turning point, all same
        if (runner == head) {
            insertNodeAfter(runner, insertVal);
        }
        
        return head;
    }
    private void insertNodeAfter(Node cur, int insertVal) {
        Node next = cur.next;
        cur.next = new Node(insertVal);
        cur.next.next = next;
    }
}
