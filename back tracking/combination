1. combination
https://leetcode.com/problems/combinations/description/
Combination, the order does not maters. So we need to loop from i not start for every helper call. This is the difference
  with permutaions.
  the therey is pick one from the num, then pick (k-1) from the remaining number. Because order does not matter. so we do not
  need to start from start index, all the preceeding numbers has already been checked. So we only need to check from i+1 in
  the remaining numbers.
  from start to num
    list.add(start)
    helper(i+1)
    list.remove(list.size()-1)
2. Combination Sum
https://leetcode.com/problems/combination-sum/description/
for this question. It's a little different with combination. The number can be resued. So we need start from i untill the
sum is equals the target. or large than target.
from start to num
    i = start, n
    list.add(start)
    helper(i)
    list.remove(list.size()-1)
    
3. Combination Sum II
https://leetcode.com/problems/combination-sum-ii/description/
same as combination. but
can not have duplicate combination. So need sort it first and compare cur with pre, if equal, then skip.
for (int i=pos; i<nums.length; i++) {
            if (i > pos && nums[i]==nums[i-1]) continue;
            subSet.add(nums[i]);
            helper(nums, i+1, ret, subSet);
            subSet.remove(subSet.size()-1);
        }
        
 4. Factor Combinations
 https://leetcode.com/problems/factor-combinations/description/
 http://www.cnblogs.com/grandyang/p/5332722.html
 这道题给了我们一个正整数n，让我们写出所有的因子相乘的形式，而且规定了因子从小到大的顺序排列，
 那么对于这种需要列出所有的情况的题目，通常都是用回溯法来求解的，由于题目中说明了1和n本身不能算其因子，
 那么我们可以从2开始遍历到n，如果当前的数i可以被n整除，说明i是n的一个因子，我们将其存入一位数组out中，
 然后递归调用n/i，此时不从2开始遍历，而是从i遍历到n/i，停止的条件是当n等于1时, 且数组总元素大于1. 因为如果数组中只有一个元素，
 则是N本身，应该被排除。
 public List<List<Integer>> getFactors(int n) {
        List<List<Integer>> ret = new ArrayList<>();
        helper(n, 2, ret, new ArrayList<>());
        return ret;
    }
    private void helper(int n, int factor, List<List<Integer>> ret, List<Integer> factorSet) {
    /********note, size should larger than 1 because n should not be included*********/
        if (n == 1 && factorSet.size() > 1) {
            ret.add(new ArrayList<>(factorSet));
            return;
        }
        
        //here, must use n not n/2. because n should be in the set except the input n
        for (int i=factor; i<=n; i++) {
            if (n % i != 0) continue;
            factorSet.add(i);
            helper(n/i, i, ret, factorSet);
            factorSet.remove(factorSet.size()-1);
        }
    }
    
    216. Combination Sum III
    return condition:
    1. target is 0
    2. list size is k
    Note the loop is from pos to 9;
    
    class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> ret = new ArrayList<List<Integer>>();
        List<Integer> path = new ArrayList<>();
        helper(k, n, 1, ret, path);
        return ret;
    }
    private void helper(int k, int n, int pos, List<List<Integer>> ret, List<Integer> p) {
        if (n < 0) return;
        if (n == 0 && p.size() == k) {
            List<Integer> newComb = new ArrayList<>();
            newComb.addAll(p);
            ret.add(newComb);
            return;
        }
        for (int i=pos; i<=9; i++) {
            p.add(i);
            helper(k, n-i, i+1, ret, p);
            p.remove(p.size()-1);
        }
    }
}
