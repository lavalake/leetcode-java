
https://leetcode.com/problems/palindrome-partitioning/description/
这又是一道需要用DFS+backtracking来解的题目，既然题目要求找到所有可能拆分成回文数的情况，
那么肯定是所有的情况都要遍历到，对于每一个子字符串都要分别判断一次是不是回文数，
那么肯定有一个判断回文数的子函数，还需要一个DFS函数用来递归，再加上原本的这个函数
从头开始去substring， 判断是否palindrome. if yes, 从下个字符开始递归判断。 如果不能找到，则回退
public List<List<String>> partition(String s) {
        List<List<String>> ret = new ArrayList<>();
        List<String> cur = new ArrayList<>();
        helper(s, 0, ret, cur);
        return ret;
    }
    private void helper(String s, int pos, List<List<String>> ret, List<String> cur) {
        if (pos == s.length()) {
            ret.add(new ArrayList<>(cur));
            return;
        }
        for (int i=pos; i<s.length(); i++) {
            String sub = s.substring(pos, i+1);
            if (isPalindrome(sub)) {
                cur.add(sub);
                helper(s, i+1, ret, cur);
                cur.remove(cur.size()-1);
            }
        }
    }
    private boolean isPalindrome(String s) {
        char[] charArr = s.toCharArray();
        for (int i=0; i<charArr.length/2; i++) {
            if (charArr[i] != charArr[charArr.length-1-i]) return false;
        }
        return true;
    }
