1. Letter Case Permutation
https://leetcode.com/problems/letter-case-permutation/description/
When I saw a problem, my first step is to draw a figure. See the figure below:
abc
abc Abc 0
abc aBc Abc ABc 1
abc abC aBc aBC Abc AbC ABc ABC 2

There we go! Is that a typical BFS/DFS problem? Yes, you are right!
Be careful to check whether a character is a digit or a letter(lower case or upper case).
这个问题不需要改变字母顺序，所以不需要循环。只需要DFS即可。

main() -> helper(s, 0, ret)
              if (digit) helper(s, i+1, ret)
              toLowercase(s[i]) helper(s, i+1, ret)
              toUppercase(s[i]) helper(s, i+1, ret)
              
2. Palindrome Permutation
https://leetcode.com/problems/palindrome-permutation/description/

this one only need to return false or true does not need to return all the cases. So we can use hashtable.

3. Palindrome Permutation II
https://leetcode.com/problems/palindrome-permutation-ii/description/


47. Permutations II
Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ret = new ArrayList<>();
        //Arrays.sort(nums);
        helper(nums, 0, ret);
        return ret;
    }
    
    public void helper(int[] nums, int start, List<List<Integer>> ret) {
        if(start == nums.length) {
            List<Integer> item = new ArrayList<>();
            for(int n : nums) {
                item.add(n);
            }
            ret.add(item);
            return;
        }
        Set<Integer> visited = new HashSet<>();
        for(int i=start; i<nums.length; i++) {
            //if(i > start && nums[i] == nums[i-1]) continue;
            //use visited set to filter duplicated
            //above compare with i-1 does not work because after swap, the array is not sorted
            if (!visited.contains(nums[i])) {
                visited.add(nums[i]);
                swap(nums, start, i);
            helper(nums, start+1, ret);
            swap(nums, start, i);
            }
            
            
        }
    }
    
    public void swap(int[] nums, int x, int y) {
        int temp = nums[x];
        nums[x] = nums[y];
        nums[y] = temp;
    }
}

