1. word search
https://leetcode.com/problems/word-search/description/
backtracking, starting from every char from the matrix, so the outmost layer is a two level loop. compare the char with 
the word char one by one. If match, then try to go to four directions. use visited to record the path.
public boolean exist(char[][] board, String word) {
        boolean[][] visited = new boolean[board.length][board[0].length];
        for (int i=0; i<board.length; i++) {
            for (int j=0; j<board[0].length; j++) {
                if (dfs(board, i, j, visited, 0, word)) return true;
            }
        }
        return false;
    }
    private boolean dfs(char[][]board, int i, int j, boolean[][] visited, int index, String word) {
        
        if (i < 0 || i>=board.length || j<0 || j>=board[0].length) return false;
        if (visited[i][j]) return false;
        if (index >= word.length()) return false;
        if (board[i][j] == word.charAt(index)) {
            if (index == word.length()-1) return true;
        
            visited[i][j] = true;
            if (dfs(board, i+1, j, visited, index+1, word)) return true;
            if (dfs(board, i- 1, j, visited, index+1, word)) return true;
            if (dfs(board, i, j+1, visited, index+1, word)) return true;
            if (dfs(board, i, j-1, visited, index+1, word)) return true;
            visited[i][j] = false;
        }
            return false;
    }
